{"version":3,"sources":["reducers/loginField.js","reducers/loginInput.js","reducers/testLoginPass.js","reducers/loginVRM.js","reducers/installationsVRM.js","containers/apiVRM.js","components/login-field.js","components/showOnlogin.js","reducers/installationsObjectData.js","containers/login.js","components/installations-list.js","reducers/selectedInst.js","containers/installationDetails.js","containers/installations.js","components/mainMenu.js","reducers/mouseCoordinates.js","reducers/newDashboardElement.js","reducers/newDashboard.js","reducers/dashboards.js","reducers/dashboardName.js","reducers/dashboardId.js","containers/constructor.js","containers/dashboard.js","reducers/hideMainMenu.js","App.js","serviceWorker.js","store/middlewares.js","store/index.js","containers/localStorageReadWrite.js","index.js","reducers/index.js","logo.svg"],"names":["setSwith","createAction","handleActions","Object","defineProperty","state","_ref","payload","loginShowSelector","setLogin","setParol","clearPass","initialState","login","pass","clear","_handleActions","_ref2","_ref3","loginPassSelector","setIsntLogin","setToken","islogin","username","idUser","headerWithToken","loginVRM_handleActions","isLoginSelector","SET_INSTALLATIONS","setInstallations","data","success","installationsSelector","targetUrl","authApi","getInstallations","FormRequestToVRM","concat","getInstallationData","idSite","formURL","urlKey","Promise","resolve","reject","axios","method","url","headers","then","responce","catch","err","getLoginRequest","loginPass","showLogin","isActive","setInstallationObjectData","response","status","X-Authorization","token","isLogin","CreateInstallationsDataObject","console","log","installationResponce","newDataObj","records","map","e","params","siteName","name","extended","idDataAttribute","code","description","value","formattedValue","updateTimerId","updateInstallations","setInstObj","time","arguments","length","undefined","setTimeout","setInterval","passInput","React","createRef","LoginField","onChangeLogin","onChangeParol","toLogin","react_default","a","createElement","TextField","autoFocus","placeholder","onChange","target","onKeyDown","keyCode","current","focus","inputRef","type","Button","color","onClick","ShowOnLogin","logout","SET_DATA","instDataObjectSelector","Login","_this$props","this","props","tosetInstallations","className","login_field","showOnlogin","Component","mapDispatchToProps","connect","buttonText","site","date","Date","last_timestamp","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","alarm","dataFilterParams","dataFilterEnergie","SmallSiteData","filter","elem","indexOf","energie","key","ButtonForSite","selectInst","selectedInst","disabled","installations_list_SmallSiteData","InstallationList","installations_list_ButtonForSite","setInst","installationSelector","InstallationDetail","id","instData","Installations","clearInterval","clearTimeout","react_router","push","to","installations_list","installationDetails","MainMenu","dashboards","hide","toggleHide","setDashboardId","setDashboardName","clearNewDashboard","onMouseLeave","react_router_dom","dashboard","setCoord","X","Y","mouseCoordSelector","setElement","clearElement","param","newDashboardElement_handleActions","paramName","newElementSelector","setElemToNewDashboard","setNewDashboard","editElemInNewDashboard","deleteElemInNewDashboard","newDashboard_handleActions","toConsumableArray","_ref4","newState","element","_ref5","newDashboardSelector","setDashboard","loadDashboards","deleteDashboard","dashboards_handleActions","dashboardsSelector","clearDashboardName","dashboardName_handleActions","dashboardNameSelector","clearDashboardId","dashboardId_handleActions","dashboardIdSelector","DashboardObject","newDashboard","editElement","deleteElement","setMouseCoordinate","setNewElement","style","position","left","top","onMouseEnter","ev","in","clientX","clientY","currentTarget","getBoundingClientRect","IconButton","OpenWith_default","size","Close_default","LevitateElement","newElement","coord","setToNewDashboard","newElementInitialState","Constructor","urlParam","queryString","parse","location","search","dashboardName","dashboardId","instDataObject","width","Select","native","inputProps","input","OutlinedInput","hidden","dataArray","elementTargetParamSet","_ref6","height","cursor","onMouseMove","bottom","zIndex","_ref7","Dashboard","_this","installationsResponce","targetId","pathname","slice","history","window","confirm","mapDispathToProps","toggleMainMenu","hideMainMenuSelector","mainTheme","createMuiTheme","palette","primary","lightBlue","secondary","orange","Page404","App","rawloginVRM","localStorage","getItem","rawInst","rawDashboards","rawinstallationsObjectData","setIsLogin","JSON","setDashboards","hideMainMenu","ThemeProvider","theme","basename","exact","path","component","mapDispatchtoProps","Boolean","hostname","match","reducers","middlewares","filterToLocalStorageLog","_filterToLocalStorage","actionsToLocalStorage","logToLocalStorage","next","action","returnValue","getState","stringify","setItem","store","loginField","loginInput","loginVRM","installationsVRM","installationsObjectData","mouseCoordinates","newDashboardElement","createMiddlewares","createStore","combineReducers","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4869da7a.chunk.js","sourcesContent":["\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_SWITH = 'LOGIN_FIELD/SET_SWITH';\r\n\r\nconst REDUCER_NAME = 'loginField';\r\n\r\nexport const setSwith = createAction(SET_SWITH);\r\n\r\nconst initialState = true;\r\n\r\nexport default handleActions({\r\n    [setSwith]: (state, {payload}) => !state,\r\n}, initialState);\r\n\r\nexport const loginShowSelector = state => state[REDUCER_NAME];","import {handleActions, createAction} from \"redux-actions\";\r\nimport {testLogin, testPass} from \"./testLoginPass\";\r\n\r\nconst SET_LOGIN = \"LOGIN_INPUT/SET_LOGIN\";\r\nconst SET_PAROL = \"LOGIN_INPUT/ET_PAROL\";\r\nconst CLEAR_PASS = \"LOGIN_INPUT/CLEAR_PASS\"\r\n\r\nconst REDUCER_NAME = \"loginInput\";\r\n\r\nexport const setLogin = createAction(SET_LOGIN);\r\nexport const setParol = createAction(SET_PAROL);\r\nexport const clearPass = createAction(CLEAR_PASS);\r\n\r\nconst initialState = { login : testLogin || \"\" , pass : testPass || \"\" };\r\nconst clear = { login : \"\" , pass : \"\" }\r\n\r\nexport default handleActions({\r\n    [setLogin] : (state, { payload }) => ({ login : payload , pass : state.pass}),\r\n    [setParol] : (state, { payload }) => ({ login: state.login, pass: payload}),\r\n    [clearPass] : (state, { payload }) => (clear),\r\n}, initialState);\r\n\r\nexport const loginPassSelector = state => state[REDUCER_NAME];","export const testLogin = '175.com.ua@gmail.com';\r\nexport const testPass = 'Ww9TArkV!dndv53';","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_ISNTLOGIN = \"LOGIN_VRM/SET_ISNTLOGIN\";\r\nconst SET_TOKEN = \"LOGIN_VRM/SET_TOKEN\";\r\n// const SET_ISLOGIN = \"LOGIN_VRM/SET_ISLOGIN\";\r\n\r\nconst REDUCER_NAME = \"loginVRM\";\r\n\r\nexport const setIsntLogin = createAction(SET_ISNTLOGIN);\r\nexport const setToken = createAction(SET_TOKEN);\r\n// export const setIsLogin = createAction(SET_ISLOGIN);\r\n\r\n\r\nconst initialState = {islogin: false, username: \"\", idUser: null, headerWithToken: {} };\r\n\r\n// const targetUrl = \"https://vrmapi.victronenergy.com\";\r\n// const authApi = \"/v2/auth/login\";\r\n\r\n\r\nexport default handleActions({\r\n    [setIsntLogin] : (state, { payload }) =>  initialState,\r\n    [setToken] : (state, { payload }) => payload,\r\n    // [setIsLogin] : (state, { payload }) => payload,\r\n}, initialState);\r\n\r\nexport const isLoginSelector = state => state[REDUCER_NAME];","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_INSTALLATIONS = \"INSTALLATIONS_VRM/SET_INSTALLATIONS\";\r\n\r\nconst REDUCER_NAME = \"installationsVRM\";\r\n\r\nexport const setInstallations = createAction(SET_INSTALLATIONS);\r\n\r\n\r\nconst initialState = {data: {success: false}};\r\n\r\n\r\nexport default handleActions({\r\n    [setInstallations] : (state, { payload }) => payload ,\r\n}, initialState);\r\n\r\nexport const installationsSelector = state => state[REDUCER_NAME];","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\n// let headerWithToken = {};\r\n// let idUser = null;\r\n\r\n\r\n//APIs\r\n\r\nconst targetUrl = \"https://vrmapi.victronenergy.com\";\r\nconst authApi = \"/v2/auth/login\";\r\n\r\nexport function formInstallationsApi(idUser){\r\n    return `${targetUrl}/v2/users/${idUser}/installations?extended=1`;\r\n}\r\n\r\nfunction formInstallationOwerviewApi(idSite){\r\n    return `${targetUrl}/v2/installations/${idSite}/system-overview`;\r\n}\r\n\r\n\r\nexport const getInstallations = FormRequestToVRM(formInstallationsApi);\r\n\r\nexport const getInstallationData = FormRequestToVRM(formInstallationOwerviewApi)\r\n\r\n\r\nfunction FormRequestToVRM(formURL) {\r\n    return (urlKey, headerWithToken) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios({\r\n                method:'get',\r\n                url: formURL(urlKey),\r\n                headers: headerWithToken\r\n            })\r\n            .then((responce) => {\r\n                resolve(responce);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport function getLoginRequest(loginPass, setToken, showLogin, isActive, setInstallations, setInstallationObjectData){\r\n    return new Promise((resolve, reject) => {\r\n        axios({\r\n            method:'post',\r\n            url: targetUrl + authApi,\r\n            data: `{\"username\": \"${loginPass.login}\", \"password\": \"${loginPass.pass}\"}`\r\n        })\r\n        .then(response => {\r\n            if (response.status === 200){\r\n                const headerWithToken = {'X-Authorization' : 'Bearer ' + response.data.token};\r\n                const idUser = response.data.idUser;\r\n                showLogin(isActive);\r\n                const isLogin = {islogin: true, username: loginPass.login, idUser: idUser, headerWithToken};\r\n                getInstallations(isLogin.idUser, isLogin.headerWithToken).then((responce) => {\r\n                    setToken(isLogin);\r\n                    setInstallations(responce);\r\n                    if (setInstallationObjectData) {\r\n                        CreateInstallationsDataObject(responce, setInstallationObjectData);\r\n                    }\r\n                });\r\n                resolve(true);\r\n        }})\r\n        .catch(function(err){\r\n            console.log(`login error: ${err}`);\r\n            return null;\r\n        });\r\n    });\r\n};\r\n\r\n\r\n\r\nexport function CreateInstallationsDataObject(installationResponce, setInstallationObjectData) {\r\n    const newDataObj = {};\r\n    installationResponce.data.records.map((e) => {\r\n        const params = {siteName: e.name};\r\n        e.extended.map((data) => {\r\n            params[data.idDataAttribute || data.code] = { name: data.description, value: data.formattedValue}\r\n        });\r\n        newDataObj[e.idSite] = params;\r\n    })\r\n    setInstallationObjectData(newDataObj);\r\n    return newDataObj;\r\n};\r\n\r\n\r\nexport let updateTimerId = null;\r\n\r\nexport function updateInstallations(isLogin, setInstallations, setInstObj, time=10000){\r\n    updateTimerId = setTimeout(() => {\r\n        updateTimerId = setInterval(() => {\r\n            if (isLogin.islogin) {\r\n                getInstallations (isLogin.idUser, isLogin.headerWithToken).then((responce) => {\r\n                    console.log(\"--- Auto request ---\");\r\n                    setInstallations(responce);\r\n                    if (setInstObj) {\r\n                        CreateInstallationsDataObject(responce, setInstObj);\r\n                    }\r\n\r\n                });\r\n            }\r\n        }, time);\r\n    }, time);\r\n};\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { getLoginRequest,  } from \"../containers/apiVRM\";\r\nimport { Button, Input, TextField, InputAdornment } from \"@material-ui/core\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n\r\n\r\nconst loginPlaceholder = \"login or email:\";\r\nconst parolPlaceholder = \"password\";\r\nconst buttonText = \"Login\"\r\n\r\n\r\nconst passInput = React.createRef();\r\n\r\nconst LoginField = ({ isActive, onChangeLogin, onChangeParol, \r\n    loginPass, toLogin, showLogin, setInstallations, setInstallationObjectData }) => {\r\n    if (!isActive) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField\r\n                // InputProps={{startAdornment: (\r\n                //     <InputAdornment position=\"start\">\r\n                //         <AccountCircle />\r\n                //     </InputAdornment>\r\n                // )}}\r\n                autoFocus = {true}\r\n                // name={loginPlaceholder} \r\n                placeholder={loginPlaceholder} \r\n                onChange={({target: { value }}) => console.log(value) || onChangeLogin(value)} \r\n                onKeyDown={ e => {\r\n                    if (e.keyCode === 13) {\r\n                        passInput.current.focus();\r\n                    }\r\n                }}\r\n                value={loginPass.login} />\r\n            </div>\r\n           <div>\r\n                <TextField\r\n                inputRef = {passInput}\r\n                type=\"password\"\r\n                // label={parolPlaceholder}\r\n                placeholder={parolPlaceholder}\r\n                onChange={({target: { value }}) => onChangeParol(value)}\r\n                onKeyDown={ e => {\r\n                    if (e.keyCode === 13) {\r\n                        getLoginRequest(loginPass, toLogin, showLogin, isActive, setInstallations)\r\n                    }\r\n                }} \r\n                value={loginPass.pass} />\r\n           </div>\r\n            <div>\r\n                <Button\r\n                color=\"primary\"\r\n                onClick={() => getLoginRequest(loginPass, toLogin, showLogin, isActive, setInstallations, setInstallationObjectData) }\r\n                >{buttonText}</Button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nLoginField.propTypes = {\r\n    isActive: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    loginPass: PropTypes.object,\r\n    toLogin: PropTypes.func\r\n};\r\n\r\nexport default LoginField;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\nconst ShowOnLogin = ({ isLogin, logout }) => {\r\n    if (isLogin.islogin) {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {isLogin.username}\r\n                </div>\r\n                <div>\r\n                    <Button color=\"secondary\" onClick={logout}>Exit</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ShowOnLogin;","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_DATA = \"INSTALLATIONS_OBJECT_DATA/SET_DATA\";\r\n\r\nconst REDUCER_NAME = \"installationsObjectData\";\r\n\r\nexport const setInstallationObjectData = createAction(SET_DATA);\r\n\r\nconst initialState = {};\r\n\r\nexport default handleActions({\r\n    [setInstallationObjectData] : (state, { payload }) => payload,\r\n}, initialState);\r\n\r\nexport const instDataObjectSelector = state => state[REDUCER_NAME];","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { loginShowSelector, setSwith } from \"../reducers/loginField\";\r\nimport { loginPassSelector, setLogin, setParol} from \"../reducers/loginInput\";\r\nimport { setIsntLogin, setToken, isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { setInstallations } from \"../reducers/installationsVRM\";\r\nimport LoginField from \"../components/login-field\";\r\nimport ShowOnLogin from \"../components/showOnlogin\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { setInstallationObjectData } from \"../reducers/installationsObjectData\";\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n    render() {\r\n        const { showLogin, isActive, onChangeLogin, \r\n            onChangeParol, loginPass, isLogin, toLogin, logout, tosetInstallations } = this.props; \r\n        return(\r\n            <div className=\"login\">\r\n                <div>\r\n                    <Button color=\"secondary\" onClick={() => showLogin(isActive)}>Login</Button>\r\n                </div>\r\n                <LoginField \r\n                isActive={isActive}\r\n                onChangeLogin={onChangeLogin}\r\n                onChangeParol={onChangeParol}\r\n                loginPass={loginPass}\r\n                toLogin={toLogin}\r\n                showLogin={showLogin}\r\n                setInstallations={tosetInstallations}\r\n                setInstallationObjectData={setInstallationObjectData} \r\n                />\r\n                <div>\r\n                    <ShowOnLogin \r\n                    isLogin={isLogin}\r\n                    logout={logout} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes ={\r\n    showLogin: PropTypes.func,\r\n    isActive: PropTypes.bool,\r\n    onChangeLogin: PropTypes.func,\r\n    onChangeParol: PropTypes.func,\r\n    loginPass: PropTypes.object,\r\n    isLogin: PropTypes.object,\r\n    toLogin: PropTypes.func,\r\n    logout: PropTypes.func,\r\n    tosetInstallations: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n}\r\n\r\nconst mapDispatchToProps = ({\r\n    showLogin: setSwith,\r\n    onChangeLogin: setLogin,\r\n    onChangeParol: setParol,\r\n    toLogin: setToken,\r\n    logout: setIsntLogin,\r\n    tosetInstallations: setInstallations,\r\n    setInstallationObjectData: setInstallationObjectData,\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    isActive: loginShowSelector(state),\r\n    loginPass: loginPassSelector(state),\r\n    isLogin: isLoginSelector(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getInstallationData } from \"../containers/apiVRM\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n\r\nconst buttonText = (site) => {\r\n    const date = new Date(site.last_timestamp * 1000);\r\n    const year = date.getFullYear();\r\n    const month = ((date.getMonth()+1) > 9)? date.getMonth() + 1: \"0\" + (date.getMonth() + 1);\r\n    const day = (date.getDate() > 9)? date.getDate(): \"0\" + date.getDate();\r\n    const hour = (date.getHours() > 9)? date.getHours(): \"0\" + date.getHours();\r\n    const minute = (date.getMinutes() > 9)? date.getMinutes(): \"0\" + date.getMinutes();\r\n\r\n    if (site.alarm === true ) {\r\n        return `${site.name} ( last connect: ${hour}:${minute} ${day}.${month}.${year} ) !alarm!`;\r\n    }\r\n    return `${site.name} ( last connect: ${hour}:${minute} ${day}.${month}.${year} )`;\r\n};\r\n    \r\nconst dataFilterParams = [143, 215];\r\nconst dataFilterEnergie = [\"consumption\", \"solar_yield\", \"from_to_grid\"];\r\n\r\nconst SmallSiteData = ({ extended }) => {\r\n    const params = extended.filter(elem => (dataFilterParams.indexOf(elem.idDataAttribute) !== -1));\r\n    // console.log(extended);\r\n    const energie = (extended.filter(elem => (dataFilterEnergie.indexOf(elem.code) !== -1)));\r\n    // console.log(energie);\r\n    const data = params.concat(energie);\r\n    // console.log(data);\r\n    return (\r\n        <div className=\"small-site-data\">\r\n            {data.map((data) => (\r\n                <div key={data.idDataAttribute || data.code}>{data.description} {data.formattedValue}</div>\r\n                // <TextField type=\"checkbox\" key={data.idDataAttribute} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ButtonForSite = ({ site, selectInst, selectedInst, isLogin }) => {\r\n    if (site.idSite === selectedInst) {\r\n        return (\r\n            <div> \r\n            <Button\r\n                color=\"primary\"\r\n                // onClick={() => selectInst(site.idSite)}\r\n                disabled\r\n            >{buttonText(site)}</Button>\r\n            <SmallSiteData\r\n            extended={site.extended} />\r\n            </div>\r\n        )\r\n    }\r\n    // console.log(site);\r\n    // console.log(site.extended);\r\n    return (\r\n        <div>\r\n        <Button\r\n            color=\"primary\" \r\n            onClick={() => {\r\n                selectInst(site.idSite);\r\n                getInstallationData(site.idSite, isLogin.headerWithToken).then((responce) => {\r\n                    const data = {}\r\n                    console.log(responce);\r\n                    data[site.idSite] = responce;\r\n                })\r\n            }}\r\n        >{buttonText(site)}</Button>\r\n        <SmallSiteData\r\n        extended={site.extended} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InstallationList = ({ installationResponce, selectInst, selectedInst, isLogin }) => {\r\n    // console.log(installationResponce)\r\n\r\n    if (installationResponce){\r\n        if (installationResponce.data.success) {\r\n            return (\r\n                <div className=\"installation-menu\">\r\n                {installationResponce.data.records.map((site) => (\r\n                    <div key={site.idSite}>\r\n                        <ButtonForSite\r\n                        site={site}\r\n                        selectInst={selectInst}\r\n                        selectedInst={selectedInst}\r\n                        isLogin={isLogin} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n                \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>Can`t receive installations list</div>\r\n    );\r\n};\r\n\r\nexport default InstallationList;","\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_INST = 'SELECTED_INST/SET_INST';\r\n\r\nconst REDUCER_NAME = 'selectedInst';\r\n\r\nexport const setInst = createAction(SET_INST);\r\n\r\nconst initialState = null;\r\n\r\nexport default handleActions({\r\n    [setInst]: (state, {payload}) => (payload),\r\n}, initialState);\r\n\r\nexport const installationSelector = state => state[REDUCER_NAME];","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { installationSelector } from \"../reducers/selectedInst\";\r\nimport { installationsSelector } from \"../reducers/installationsVRM\";\r\n\r\n// function FilterIdSite(props) {\r\n//     const { id, instData } = props;\r\n//     console.log(instData);\r\n//     const choosenSite = JSON.stringify(instData.data.records);\r\n//     return (\r\n//         <div>\r\n//             {choosenSite}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n\r\nclass InstallationDetail extends React.Component {\r\n    render(){\r\n        const { id, instData } = this.props;\r\n        // console.log(instData);\r\n        if (instData.data.success) {\r\n            return (\r\n                <div className='installation-details'>\r\n                    {/* <FilterIdSite\r\n                    id={id}\r\n                    instData={instData}\r\n                    /> */}\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n};\r\n\r\nInstallationDetail.propTypes = {\r\n    id: PropTypes.number,\r\n    instData: PropTypes.object\r\n\r\n};\r\n\r\n\r\nconst mapDispatchToProps = ({\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    id: installationSelector(state),\r\n    instData: installationsSelector(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InstallationDetail);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport InstallationList from \"../components/installations-list\";\r\nimport { setInst, installationSelector } from \"../reducers/selectedInst\";\r\nimport InstallationDetails from \"./installationDetails\";\r\nimport { installationsSelector, setInstallations } from \"../reducers/installationsVRM\";\r\nimport { updateTimerId, updateInstallations } from \"./apiVRM\";\r\nimport { setInstallationObjectData } from \"../reducers/installationsObjectData\";\r\n\r\n\r\n\r\n\r\nclass Installations extends React.Component {\r\n    componentWillUnmount(){\r\n        // console.log(\"componentWilUnmount\");\r\n        clearInterval(updateTimerId);\r\n        clearTimeout(updateTimerId);\r\n    };\r\n\r\n    componentWillMount(){\r\n        // console.log(\"componentWilMount\");\r\n        updateInstallations(this.props.isLogin, this.props.setInstallations, this.props.setInstallationObjectData );\r\n    };\r\n\r\n    componentWillUpdate(){\r\n        // console.log(\"componentWilUpdate\");\r\n    };\r\n\r\n    render(){\r\n        const { isLogin, installationResponce, selectInst, selectedInst } = this.props;\r\n\r\n        if (!isLogin.islogin) {\r\n            return (\r\n                <div className=\"inner-warning\">Please login first!</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"installations\">\r\n                <Redirect push to=\"/sites\" />\r\n                <InstallationList \r\n                installationResponce={installationResponce}\r\n                selectInst={selectInst} \r\n                selectedInst={selectedInst}\r\n                isLogin={isLogin} />\r\n                <InstallationDetails />\r\n            </div>\r\n        )\r\n        \r\n    };\r\n};\r\n\r\nInstallations.propTypes = {\r\n    isLogin: PropTypes.object,\r\n    installationResponce: PropTypes.object,\r\n    selectInst: PropTypes.func,\r\n    selectedInst: PropTypes.number,\r\n    setInstallations: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLogin: isLoginSelector(state),\r\n    installationResponce: installationsSelector(state),\r\n    selectedInst: installationSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectInst: setInst,\r\n    setInstallations: setInstallations, \r\n    setInstallationObjectData: setInstallationObjectData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Installations);\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\n\r\nexport function MainMenu({ dashboards, hide, toggleHide, setDashboardId,\r\n    setDashboardName, clearNewDashboard }) {\r\n    if (hide) {\r\n        return (\r\n            <div>\r\n                <Button \r\n                color=\"primary\"\r\n                className=\"main-menu-button\"\r\n                onClick={toggleHide}>\r\n                    Menu\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div onMouseLeave={toggleHide}>\r\n            <Button \r\n            color=\"primary\"\r\n            className=\"main-menu-button\"\r\n            onClick={toggleHide}>\r\n                hide menu\r\n            </Button>\r\n            <div className=\"main-menu\">\r\n                <Link \r\n                to=\"/sites\" \r\n                onClick={toggleHide}>\r\n                    <div className=\"main-menu-base-elem\">\r\n                        Go to main\r\n                    </div>\r\n                </Link>       \r\n                {dashboards.map( (dashboard, id) => {\r\n                    if (dashboard) {    \r\n                        return (\r\n                            <Link \r\n                            key={id}\r\n                            to={`/dashboards/${dashboard.id}`} \r\n                            onClick={toggleHide}>\r\n                                <div className=\"main-menu-elem\">\r\n                                    {dashboard.name}\r\n                                </div>\r\n                            </Link>     \r\n                        );\r\n                    }\r\n                    return null;\r\n                })}\r\n                <Link \r\n                to=\"/newdashboard\" \r\n                onClick={() => {\r\n                    toggleHide();\r\n                    setDashboardId(dashboards.length);\r\n                    setDashboardName(`Dashboard #${dashboards.length}`);\r\n                    clearNewDashboard();\r\n                }}>\r\n                    <div className=\"main-menu-base-elem\">\r\n                        Create Dashboard\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};","\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_COORD = 'MOUSE_COORD/SET_COORD';\r\n\r\nconst REDUCER_NAME = 'mouseCoordinates';\r\n\r\nexport const setCoord = createAction(SET_COORD);\r\n\r\nconst initialState = {X: 0, Y: 0};\r\n\r\nexport default handleActions({\r\n    [setCoord]: (state, { payload }) => payload,\r\n}, initialState);\r\n\r\nexport const mouseCoordSelector = state => state[REDUCER_NAME];","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_ELEMENT = 'NEW_ELEMENT/SET_ELEMENT';\r\nconst CLEAR_ELEMENT = 'NEW_ELEMENT/CLEAR_ELEMENT';\r\n\r\nconst REDUCER_NAME = 'newDashboardElement';\r\n\r\nexport const setElement = createAction(SET_ELEMENT);\r\nexport const clearElement = createAction(CLEAR_ELEMENT);\r\n\r\nexport const initialState = { idSite:\"-\", param: \"-\" };\r\n\r\nexport default handleActions({\r\n    [setElement]: (state, { payload }) => {\r\n        return(\r\n            { \r\n                idSite: payload.idSite || state.idSite, \r\n                param: payload.param || state.param, \r\n                name: (payload.name === \"\")? \"\" : payload.name || state.name,\r\n                paramName: payload.paramName || state.paramName,\r\n                value: payload.value || state.value\r\n            }\r\n            )},\r\n    [clearElement]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const newElementSelector = state => state[REDUCER_NAME];","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/SET_DASHBOARD_ELEMENT';\r\nconst SET_DASHBOARD = 'NEW_DASHBOARD/SET_DASHBOARD';\r\nconst EDIT_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/EDIT_DASHBOARD_ELEMENT';\r\nconst DELETE_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/DELETE_DASHBOARD_ELEMENT';\r\nconst CLEAR_DASHBOARD = 'NEW_DASHBOARD/CLEAR_DASHBOARD';\r\n\r\nconst REDUCER_NAME = 'newDashboard';\r\n\r\nexport const setElemToNewDashboard = createAction(SET_DASHBOARD_ELEMENT);\r\nexport const setNewDashboard = createAction(SET_DASHBOARD);\r\nexport const editElemInNewDashboard = createAction(EDIT_DASHBOARD_ELEMENT);\r\nexport const deleteElemInNewDashboard = createAction(DELETE_DASHBOARD_ELEMENT);\r\nexport const clearNewDashboard = createAction(CLEAR_DASHBOARD);\r\n\r\nconst initialState = [];\r\n\r\nexport default handleActions({\r\n    [setElemToNewDashboard]: (state, { payload }) => [...state, payload],\r\n    [setNewDashboard]: (state, { payload }) => payload,\r\n    [clearNewDashboard]: (state, { payload }) => initialState,\r\n    [editElemInNewDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        newState[payload.id].element.name = payload.value;\r\n        return newState;\r\n    },\r\n    [deleteElemInNewDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        newState[payload] = \"\";\r\n        return newState;\r\n    },\r\n}, initialState);\r\n\r\nexport const newDashboardSelector = state => state[REDUCER_NAME];","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nexport const SET_DASHBOARD = 'DASHBOARDS/SET_DASHBOARD';\r\nconst LOAD_DASHBOARDS = 'DASHBOARDS/LOAD_DASHBOARDS';\r\nconst EDIT_DASHBOARD = 'DASHBOARDS/EDIT_DASHBOARD';\r\nconst DELETE_DASHBOARD = 'DASHBOARDS/DELETE_DASHBOARD';\r\n\r\nconst REDUCER_NAME = 'dashboards';\r\n\r\nexport const setDashboard = createAction(SET_DASHBOARD);\r\nexport const loadDashboards = createAction(LOAD_DASHBOARDS);\r\nexport const editDashboard = createAction(EDIT_DASHBOARD);\r\nexport const deleteDashboard = createAction(DELETE_DASHBOARD);\r\n\r\nconst initialState = [];\r\n\r\nexport default handleActions({\r\n    [setDashboard]: (state, { payload })  => {\r\n        let newState = [...state];\r\n        newState[payload.id] = {dashboard: payload.dashboard,\r\n        name: payload.name, id: payload.id};\r\n        return newState;\r\n    },\r\n    [loadDashboards]: (state, { payload }) => payload,\r\n    [deleteDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        newState[payload] = \"\";\r\n        return newState;\r\n    },\r\n}, initialState);\r\n\r\nexport const dashboardsSelector = state => state[REDUCER_NAME];","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"dashboardName\";\r\n\r\nconst SET_NAME = \"DASHBOARD_NAME/SET_NAME\";\r\nconst CLEAR_NAME = \"DASHBOARD_NAME/CLEAR_NAME\";\r\n\r\nexport const setDashboardName = createAction(SET_NAME);\r\nexport const clearDashboardName = createAction(CLEAR_NAME);\r\n\r\nconst initialState = \"newDashboard\";\r\n\r\nexport default handleActions({\r\n    [setDashboardName]: (state, { payload }) => payload,\r\n    [clearDashboardName]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const dashboardNameSelector = state => state[REDUCER_NAME];","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"dashboardId\";\r\n\r\nconst SET_ID = \"DASHBOARD_NAME/SET_ID\";\r\nconst CLEAR_ID = \"DASHBOARD_NAME/CLEAR_ID\";\r\n\r\nexport const setDashboardId = createAction(SET_ID);\r\nexport const clearDashboardId = createAction(CLEAR_ID);\r\n\r\nconst initialState = null;\r\n\r\nexport default handleActions({\r\n    [setDashboardId]: (state, { payload }) => payload,\r\n    [clearDashboardId]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const dashboardIdSelector = state => state[REDUCER_NAME];    ","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { mouseCoordSelector, setCoord } from \"../reducers/mouseCoordinates\";\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { Input, Button, TextField, Select, OutlinedInput, IconButton } from \"@material-ui/core\";\r\nimport { installationsSelector } from \"../reducers/installationsVRM\";\r\nimport { setElement, newElementSelector, clearElement, initialState as newElementInitialState } from \"../reducers/newDashboardElement\";\r\nimport { CreateInstallationsDataObject } from \"./apiVRM\";\r\nimport { newDashboardSelector, setElemToNewDashboard, editElemInNewDashboard, deleteElemInNewDashboard, clearNewDashboard, setNewDashboard } from \"../reducers/newDashboard\";\r\nimport { dashboardsSelector, setDashboard } from \"../reducers/dashboards\";\r\nimport { dashboardNameSelector, setDashboardName } from \"../reducers/dashboardName\";\r\nimport { dashboardIdSelector, setDashboardId } from \"../reducers/dashboardId\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport MoveIcon from \"@material-ui/icons/OpenWith\";\r\nimport { instDataObjectSelector } from \"../reducers/installationsObjectData\";\r\nimport queryString from \"query-string\";\r\n\r\n\r\n\r\nconst elementTargetParamSet = (instDataObject, idSite) => {\r\n    const dataArray = [];\r\n    for (let key in instDataObject[idSite]) {\r\n        dataArray.push({ \r\n            id: key, \r\n            name: instDataObject[idSite][key].name, \r\n            value: instDataObject[idSite][key].value })\r\n    }\r\n    return dataArray;  \r\n};\r\n\r\nfunction DashboardObject({ newDashboard, editElement, deleteElement, \r\n                        setMouseCoordinate, setNewElement }) {\r\n    // console.log(newDashboard);\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {newDashboard.map((elem, id) => {\r\n                if (elem === \"\") {\r\n                    return null\r\n                }\r\n                return (\r\n                    <div \r\n                    key={id} \r\n                    style={{position: 'absolute', left: elem.X - 48, top: elem.Y}}\r\n                    onMouseEnter={(ev) => {\r\n                        setMouseCoordinate({ in: false, X: ev.clientX, Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n                    }}\r\n                    onMouseLeave={(ev) => {\r\n                        setMouseCoordinate({ in: true, X: ev.clientX, Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n                    }}>\r\n                        <IconButton\r\n                        className='move-elem-button'\r\n                        onClick={() => {\r\n                            setNewElement(newDashboard[id].element);\r\n                            deleteElement(id);\r\n                        }}>\r\n                            <MoveIcon />\r\n                        </IconButton>\r\n                        <input \r\n                        className=\"constructor-elem-input\"\r\n                        size={elem.element.name.length}\r\n                        key={id}\r\n                        value={elem.element.name}\r\n                        onChange={({target: {value}}) => editElement({ id, value })} >\r\n                        </input>\r\n                        {` : ${elem.element.value}`}\r\n                        \r\n                        <IconButton \r\n                        className='delete-elem-button'\r\n                        onClick={() => deleteElement(id)}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nfunction LevitateElement({ newElement, coord, setToNewDashboard, clearElement }) {\r\n    if (!coord.in){\r\n        return null;\r\n    }\r\n    if (newElement === newElementInitialState) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div \r\n        style={{\r\n            position: 'absolute', \r\n            left: `${coord.X}px`, \r\n            top: `${coord.Y}px`}}\r\n            onClick={(ev) => {\r\n                if ( newElement.idSite !== newElementInitialState.idSite \r\n                    && newElement.param !== newElementInitialState.param ) {\r\n                    setToNewDashboard({element: newElement, X: coord.X, Y: coord.Y});\r\n                    clearElement();\r\n                }}\r\n            }>\r\n                {newElement.name || \"choose monitor\"} : {newElement.value || \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nclass Constructor extends React.Component {\r\n    componentWillMount() {\r\n        const urlParam = queryString.parse(this.props.location.search);\r\n        console.log(urlParam);\r\n        if (urlParam.id) {\r\n            this.props.setNewDashboard(this.props.dashboards[urlParam.id].dashboard);\r\n            this.props.setDashboardName(this.props.dashboards[urlParam.id].name);\r\n            this.props.setDashboardId(urlParam.id);\r\n        } else {\r\n            this.props.setDashboardId(this.props.dashboards.length)\r\n            this.props.setDashboardName(`Dashboard #${this.props.dashboards.length}`)\r\n            this.props.clearNewDashboard();\r\n        }\r\n        // if (this.props.dashboardId === null) {\r\n        //     this.props.setDashboardId(this.props.dashboards.length)\r\n        // }\r\n    };\r\n    componentWillUnmount() {\r\n        this.props.setDashboardId(null);\r\n        this.props.clearNewDashboard();\r\n\r\n    };\r\n   render(){\r\n    const { setMouseCoordinate, coord, isLogin, installationResponce, \r\n        setNewElement, newElement, newDashboard, setToNewDashboard, \r\n        editElement, deleteElement, clearElement, dashboards, setDashboard, \r\n        dashboardName, setDashboardName, dashboardId, setDashboardId, \r\n        instDataObject } = this.props;\r\n\r\n    // const sitesData = CreateInstallationsDataObject(installationResponce);\r\n\r\n    const SiteSelect = () => (\r\n        <Select \r\n        native\r\n        inputProps={{style: {width: \"25\"}}}\r\n        input={<OutlinedInput />}\r\n        color=\"primary\"\r\n        name='site-select' \r\n        value={newElement.idSite}\r\n        onChange={({target: { value }}) => {\r\n            if (value !== \"-\") {\r\n                setNewElement({ \r\n                    idSite: value\r\n                })\r\n            } \r\n        }}>\r\n            <option \r\n            key=\"null\" \r\n            value=\"-\" \r\n            hidden>Choose site</option>\r\n            {installationResponce.data.records.map((site) => (\r\n                <option \r\n                key={site.idSite} \r\n                value={site.idSite}>{site.name}</option>\r\n            ))}  \r\n        </Select>\r\n    );\r\n\r\n    const ParamSelect = () => (\r\n        <Select\r\n        native\r\n        inputProps={{style: {width: \"25\"}}}\r\n        input={<OutlinedInput />}\r\n        color=\"primary\" \r\n        name='param-select' \r\n        value={newElement.param} \r\n        onChange={({target: { value }}) => {\r\n            if (newElement.idSite !== newElementInitialState.idSite && value !== newElementInitialState.param) {\r\n                setNewElement({\r\n                    param: value, \r\n                    paramName: instDataObject[newElement.idSite][value].name,\r\n                    value: instDataObject[newElement.idSite][value].value,\r\n                    name: instDataObject[newElement.idSite][value].name\r\n                })\r\n            } \r\n        }}>\r\n            <option key=\"null\" value=\"-\" hidden>\r\n            {(newElement.idSite === newElementInitialState.idSite)? \r\n            \"Choose site first\" : \"Choose parameter\"}\r\n            </option>\r\n            \r\n            {elementTargetParamSet(instDataObject, newElement.idSite).map((e) => (\r\n                <option key={e.id} value={e.id}>{e.name}</option>\r\n            ))}\r\n        </Select>\r\n    );\r\n\r\n\r\n    if (!isLogin.islogin) {\r\n        return (\r\n            <div className=\"inner-warning\">Please login first!</div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{width: \"100%\"}}>\r\n                <SiteSelect />\r\n                <ParamSelect />\r\n                <OutlinedInput \r\n                inputProps={{style: {width: \"-webkit-fill-available\"}}}\r\n                color=\"primary\"\r\n                placeholder={\"Edit parameter name\"}\r\n                value={newElement.name}\r\n                onChange={({target: { value }}) => {\r\n                    console.log(value);\r\n                    setNewElement({ \r\n                        name: value\r\n                    })\r\n                }} />\r\n            </div>\r\n            <div \r\n            className=\"constructor-field\"\r\n            style={{position: 'relative', \r\n                        height: \"-webkit-fill-available\",\r\n                        width: '100%', \r\n                        cursor: 'crosshair'}} \r\n            onMouseMove={(ev) => {\r\n                setMouseCoordinate({ in: true, \r\n                    X: ev.clientX, \r\n                    Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n                }\r\n            }\r\n            onMouseLeave={(ev) => {\r\n                setMouseCoordinate({ in: false, \r\n                    X: ev.clientX, \r\n                    Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n                }\r\n            }>\r\n                <LevitateElement\r\n                newElement={newElement}\r\n                coord={coord}\r\n                setToNewDashboard={setToNewDashboard}\r\n                clearElement={clearElement} />\r\n\r\n                <DashboardObject \r\n                newDashboard={newDashboard}\r\n                editElement={editElement}\r\n                deleteElement={deleteElement}\r\n                setMouseCoordinate={setMouseCoordinate}\r\n                setNewElement={setNewElement} />\r\n            </div>\r\n            <div style={{position: 'fixed', left: \"5px\", bottom: \"5px\", zIndex: \"100\"}}>\r\n                <TextField \r\n                color=\"primary\"\r\n                onChange={({ target: { value }}) => setDashboardName(value)}\r\n                value={dashboardName}\r\n                >\r\n                </TextField>\r\n                <Button\r\n                onClick={() => setDashboard({ \r\n                                    dashboard: newDashboard, \r\n                                    name: dashboardName, \r\n                                    id: dashboardId})}\r\n                >Save dashboard</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n   };\r\n};\r\n\r\nConstructor.propTypes = {\r\n    coord: PropTypes.object,\r\n    setMouseCoordinate:PropTypes.func,\r\n    isLogin: PropTypes.object,\r\n    installationResponce: PropTypes.object,\r\n    setNewElement: PropTypes.func,\r\n    newElement: PropTypes.object,\r\n    newDashboard: PropTypes.array,\r\n    setToNewDashboard: PropTypes.func,\r\n    editElement: PropTypes.func,\r\n    deleteElement: PropTypes.func,\r\n    clearElement: PropTypes.func,\r\n    dashboards: PropTypes.array,\r\n    setDashboard: PropTypes.func,\r\n    dashboardName: PropTypes.string,\r\n    setDashboardName: PropTypes.func,\r\n    dashboardId: PropTypes.number,\r\n    setDashboardId: PropTypes.func,\r\n    clearNewDashboard: PropTypes.func,\r\n    instDataObject: PropTypes.object,\r\n    setNewDashboard: PropTypes.func,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    coord: mouseCoordSelector(state),\r\n    isLogin: isLoginSelector(state),\r\n    installationResponce: installationsSelector(state),\r\n    newElement: newElementSelector(state),\r\n    newDashboard: newDashboardSelector(state),\r\n    dashboards: dashboardsSelector(state),\r\n    dashboardName: dashboardNameSelector(state),\r\n    dashboardId: dashboardIdSelector(state),\r\n    instDataObject: instDataObjectSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setMouseCoordinate: setCoord,\r\n    setNewElement: setElement,\r\n    setToNewDashboard: setElemToNewDashboard,\r\n    editElement: editElemInNewDashboard,\r\n    deleteElement: deleteElemInNewDashboard,\r\n    clearElement: clearElement,\r\n    setDashboardName: setDashboardName,\r\n    setDashboardId: setDashboardId,\r\n    setDashboard: setDashboard,\r\n    clearNewDashboard: clearNewDashboard,\r\n    setNewDashboard: setNewDashboard,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Constructor);\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport {} from \"react-router\";\r\nimport { dashboardsSelector, deleteDashboard } from \"../reducers/dashboards\";\r\nimport { installationsSelector, setInstallations } from \"../reducers/installationsVRM\";\r\nimport { CreateInstallationsDataObject, updateTimerId, updateInstallations } from \"./apiVRM\";\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { setNewDashboard } from \"../reducers/newDashboard\";\r\nimport { setDashboardName } from \"../reducers/dashboardName\";\r\nimport { setDashboardId } from \"../reducers/dashboardId\";\r\nimport { setInstallationObjectData, instDataObjectSelector } from \"../reducers/installationsObjectData\";\r\n\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n    componentWillUnmount(){\r\n        clearInterval(updateTimerId);\r\n        clearTimeout(updateTimerId);\r\n    }\r\n    componentWillMount(){\r\n        updateInstallations(this.props.isLogin, this.props.setInstallations, \r\n            this.props.setInstallationObjectData);\r\n    };\r\n    render() {\r\n        const { dashboards, installationsResponce, setNewDashboard, \r\n            deleteDashboard, setDashboardName, setDashboardId, instDataObject } = this.props;\r\n        const targetId = this.props.location.pathname.slice(12);\r\n        // const dashboardsArray = dashboards[targetId].dashboard;\r\n        // const installationsData = CreateInstallationsDataObject(installationsResponce);\r\n        return(\r\n            <div style={{position: \"static\"}}>\r\n                <div className=\"dashboard\" style={{position: \"relative\"}}>\r\n                {dashboards[targetId].dashboard.map((elem, id) => {\r\n                    if (elem === \"\") {\r\n                        return null\r\n                    }\r\n                    return (\r\n                    <div\r\n                    key={id} \r\n                    style={{position: 'absolute', left: elem.X, top: elem.Y}} >\r\n                    {`${elem.element.name} : \r\n                    ${(instDataObject[elem.element.idSite] && instDataObject[elem.element.idSite][elem.element.param])\r\n                        ? instDataObject[elem.element.idSite][elem.element.param].value\r\n                        : \"---\"\r\n                    }`}\r\n                    </div>\r\n                )})}  \r\n                </div>\r\n                <div style={{position: 'fixed', left: \"5px\", bottom: \"5px\"}}>\r\n                <Button onClick={\r\n                    () => {\r\n                        // setNewDashboard(dashboards[targetId].dashboard);\r\n                        // setDashboardName(dashboards[targetId].name);\r\n                        // setDashboardId(targetId);\r\n                        this.props.history.push(`/newdashboard/?id=${targetId}`);\r\n                    }\r\n                }>Change dashboard</Button>\r\n                <Button onClick={() => {\r\n                    if (window.confirm(\"Do you really want to delete dashboard?\")) {\r\n                        deleteDashboard(targetId);\r\n                        this.props.history.push(\"/\");\r\n                    }\r\n                }}>Delete dashboard</Button>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    };\r\n};\r\n\r\nDashboard.propTypes = {\r\n    dashboards: PropTypes.array,\r\n    installationsResponce: PropTypes.object,\r\n    isLogin: PropTypes.object,\r\n    setInstallations: PropTypes.func,\r\n    setNewDashboard: PropTypes.func,\r\n    deleteDashboard: PropTypes.func,\r\n    setDashboardName: PropTypes.func,\r\n    setDashboardId: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n    instDataObject: PropTypes.object,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dashboards: dashboardsSelector(state),\r\n    installationsResponce: installationsSelector(state),\r\n    isLogin: isLoginSelector(state),\r\n    instDataObject: instDataObjectSelector(state),\r\n});\r\n\r\nconst mapDispathToProps = {\r\n    setInstallations: setInstallations,\r\n    setNewDashboard: setNewDashboard,\r\n    deleteDashboard: deleteDashboard,\r\n    setDashboardName: setDashboardName,\r\n    setDashboardId: setDashboardId,\r\n    setInstallationObjectData: setInstallationObjectData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(Dashboard);","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"hideMainMenu\";\r\n\r\nconst TOGGLE_MAIN_MENU = \"HIDE_MAIN_MENU/TOGGLE_MAIN_MENU\";\r\n\r\nexport const toggleMainMenu = createAction(TOGGLE_MAIN_MENU);\r\n\r\nconst initialState = true;\r\n\r\nexport default handleActions({\r\n    [toggleMainMenu]: (state, { payload }) => (state)? false : true,\r\n}, initialState);\r\n\r\nexport const hideMainMenuSelector = state => state[REDUCER_NAME];    ","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from '@material-ui/core';\nimport{ BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport Login from \"./containers/login\";\nimport Installations from './containers/installations';\nimport { orange, lightBlue, blue } from '@material-ui/core/colors';\n// import { getCookie } from './containers/cookieGetSet';\nimport { setToken } from './reducers/loginVRM';\nimport { setInstallations } from './reducers/installationsVRM';\nimport { MainMenu } from './components/mainMenu';\nimport Constructor from \"./containers/constructor\";\nimport { dashboardsSelector, loadDashboards } from './reducers/dashboards';\nimport Dashboard from './containers/dashboard';\nimport { hideMainMenuSelector, toggleMainMenu } from './reducers/hideMainMenu';\nimport { setInstallationObjectData } from './reducers/installationsObjectData';\nimport { setDashboardId } from './reducers/dashboardId';\nimport { setDashboardName } from './reducers/dashboardName';\nimport { clearNewDashboard } from './reducers/newDashboard';\n\n\n\nconst mainTheme = createMuiTheme({\n  palette: {\n    primary: lightBlue,\n    secondary: orange,\n  }\n});\n\nconst Page404 = () =>(\n  <div>\n    <h2>404 Error: Page not found</h2>\n    <Link to=\"/sites\">Go to main</Link>\n  </div>   \n  );\n\n\nclass App extends React.Component{\n\n  componentWillMount(){\n    const rawloginVRM = localStorage.getItem(\"loginVRM\");\n    const rawInst = localStorage.getItem(\"installationsVRM\");\n    const rawDashboards = localStorage.getItem(\"dashboards\");\n    const rawinstallationsObjectData = localStorage.getItem(\"installationsObjectData\");\n    // console.log(\"-- write to store from Local Storage --\");\n    if (rawloginVRM) this.props.setIsLogin(JSON.parse(rawloginVRM))   \n    if (rawInst) this.props.setInst(JSON.parse(rawInst))\n    if (rawDashboards) this.props.setDashboards(JSON.parse(rawDashboards))\n    if (rawinstallationsObjectData) this.props.setInstallationObjectData(JSON.parse(rawinstallationsObjectData))\n  };\n\n  render(){\n    const { dashboards, hideMainMenu, toggleHide } = this.props;\n    return(\n      <ThemeProvider theme={mainTheme}>\n      <div className=\"app\">\n        <h1>\n          PV monitor\n        </h1>\n        <BrowserRouter basename=\"/application\">\n          <MainMenu\n          dashboards={dashboards}\n          toggleHide={toggleHide}\n          hide={hideMainMenu}\n          setDashboardId={setDashboardId}\n          setDashboardName={setDashboardName}\n          clearNewDashboard={clearNewDashboard} />\n        <Login />\n            <Switch>\n            <Route exact path=\"/\" component={Installations} />\n            <Route path=\"/sites\" component={Installations} />\n            {dashboards.map((dashboard, id) => {\n              if (dashboard !== \"\") {\n                return (\n                  <Route key={id} path={`/dashboards/${id}`} component={Dashboard}/>\n                )\n              }\n            })}\n            <Route path=\"/newdashboard\" component={Constructor} />\n            <Route component={Page404} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nApp.propTypes = {\n  setIsLogin: PropTypes.func,\n  setInst: PropTypes.func,\n  dashboards: PropTypes.array,\n  setDashboards: PropTypes.func,\n  hideMainMenu: PropTypes.bool,\n  toggleHide: PropTypes.func,\n  setInstallationObjectData: PropTypes.func,\n  setDashboardId: PropTypes.func,\n  setDashboardName: PropTypes.func,\n  clearNewDashboard: PropTypes.func,\n};\n\nconst mapDispatchtoProps = {\n  setIsLogin: setToken,\n  setInst: setInstallations,\n  setDashboards: loadDashboards,\n  toggleHide: toggleMainMenu,\n  setInstallationObjectData: setInstallationObjectData,\n  setDashboardId: setDashboardId,\n  setDashboardName: setDashboardName,\n  clearNewDashboard: clearNewDashboard,\n};\n\nconst mapStateToProps = state => ({\n  dashboards: dashboardsSelector(state),\n  hideMainMenu: hideMainMenuSelector(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { setCookie } from \"../containers/cookieGetSet\";\r\nimport { setLocalStorage } from \"../containers/localStorageReadWrite\";\r\nimport { SET_INSTALLATIONS } from \"../reducers/installationsVRM\";\r\nimport { SET_ISNTLOGIN } from \"../reducers/loginVRM\";\r\nimport { SET_DASHBOARD } from \"../reducers/dashboards\";\r\nimport { SET_DATA } from \"../reducers/installationsObjectData\";\r\n\r\nconst filterToLocalStorageLog = {\r\n    [SET_ISNTLOGIN]: \"loginVRM\", \r\n    [SET_INSTALLATIONS]: \"installationsVRM\", \r\n    [SET_DATA]: \"installationsObjectData\",\r\n    [SET_DASHBOARD]: \"dashboards\"\r\n};\r\n\r\n\r\nconst actionsToLocalStorage = [SET_INSTALLATIONS, SET_ISNTLOGIN, SET_DATA, SET_DASHBOARD]\r\n\r\nexport const  logToLocalStorage = state => next => action => {\r\n    const returnValue = next(action);\r\n    // console.log(action);\r\n    const newState = state.getState();\r\n    if (actionsToLocalStorage.indexOf(action.type) !== -1) {\r\n        // console.log(\"-- log state to Local Storage -- \");\r\n        setLocalStorage(filterToLocalStorageLog[action.type], \r\n            JSON.stringify(newState[filterToLocalStorageLog[action.type]]));\r\n            // console.log(\"Data to log: \", newState[filterToLocalStorageLog[action.type]]);\r\n    }\r\n    \r\n    return returnValue;\r\n}\r\n\r\n// const filterToCookieLog = [\"loginVRM\"];\r\n\r\n// export const  logToCookie = state => next => action => {\r\n//         const returnValue = next(action);\r\n//         const newState = state.getState();\r\n//         console.log('1: ', newState);\r\n//         // console.log('2: ', newState.loginVRM);\r\n//         filterToCookieLog.map((key) => {\r\n//             if (newState[key]) {\r\n//                 console.log(\"cookie tolog: \", newState[key]);\r\n//                 setCookie(key, JSON.stringify(newState[key]), {\"max-age\": 0});\r\n//             }\r\n//         })\r\n//         // console.log(document.cookie);\r\n//         return returnValue;\r\n// }\r\n\r\n\r\nconst createMiddlewares = () => [\r\n    // logToCookie,\r\n    logToLocalStorage\r\n]\r\n\r\nexport default createMiddlewares;","import { createStore , combineReducers, applyMiddleware } from \"redux\";\r\nimport { logger } from \"./middlewares\";\r\n\r\nexport const configStore = (reducers, middlewares) => {\r\n   return createStore(combineReducers(reducers), {}, applyMiddleware(...middlewares));\r\n};","import React from \"react\";\r\n\r\nexport function setLocalStorage(key, value) {\r\n    const myStorage = localStorage;\r\n    myStorage.setItem(key, value);\r\n    // console.log(localStorage);\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\n\nimport { configStore } from \"./store\";\nimport { reducers } from \"./reducers\"\nimport createMiddlewares from './store/middlewares';\n\n\nconst store = configStore(reducers, createMiddlewares());\n\nconst RootComponent = () => {\n    return (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    )\n}\n\nReactDOM.render(<RootComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import loginField from \"./loginField\";\r\nimport loginInput from \"./loginInput\";\r\nimport loginVRM from \"./loginVRM\";\r\nimport installationsVRM from \"./installationsVRM\";\r\nimport selectedInst from \"./selectedInst\";\r\nimport installationsObjectData from \"./installationsObjectData\";\r\nimport mouseCoordinates from \"./mouseCoordinates\";\r\nimport newDashboardElement from \"./newDashboardElement\";\r\nimport newDashboard from \"./newDashboard\";\r\nimport dashboards from \"./dashboards\";\r\nimport dashboardName from \"./dashboardName\";\r\nimport dashboardId from \"./dashboardId\";\r\nimport hideMainMenu from \"./hideMainMenu\";\r\n\r\n\r\nexport const reducers = {\r\n    loginField,\r\n    loginInput,\r\n    loginVRM,\r\n    installationsVRM,\r\n    selectedInst,\r\n    installationsObjectData,\r\n    mouseCoordinates,\r\n    newDashboardElement,\r\n    newDashboard,\r\n    dashboards,\r\n    dashboardName,\r\n    dashboardId,\r\n    hideMainMenu,\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}