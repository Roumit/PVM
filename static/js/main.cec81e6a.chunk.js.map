{"version":3,"sources":["reducers/loginField.js","reducers/loginInput.js","reducers/testLoginPass.js","reducers/loginVRM.js","reducers/installationsVRM.js","reducers/installationsObjectData.js","containers/apiVRM.js","components/login-field.js","components/showOnlogin.js","containers/login.js","components/installations-list.js","reducers/selectedInst.js","containers/installationDetails.js","containers/installations.js","components/mainMenu.js","reducers/mouseCoordinates.js","reducers/newDashboardElement.js","components/constructorElement.js","components/dashboardInConstructor.js","reducers/newDashboard.js","reducers/dashboards.js","reducers/dashboardName.js","reducers/dashboardId.js","containers/constructorField.js","containers/constructor.js","containers/dashboard.js","reducers/hideMainMenu.js","App.js","serviceWorker.js","reducers/index.js","store/middlewares.js","containers/localStorageReadWrite.js","index.js","store/index.js","logo.svg"],"names":["setSwith","createAction","handleActions","Object","defineProperty","state","_ref","payload","loginShowSelector","setLogin","setParol","clearPass","initialState","login","pass","clear","_handleActions","_ref2","_ref3","loginPassSelector","setIsntLogin","setToken","islogin","username","idUser","headerWithToken","loginVRM_handleActions","isLoginSelector","SET_INSTALLATIONS","setInstallations","data","success","installationsSelector","SET_DATA","setInstallationObjectData","instDataObjectSelector","targetUrl","authApi","getInstallations","FormRequestToVRM","concat","idSite","formURL","urlKey","Promise","resolve","reject","axios","method","url","headers","then","responce","catch","err","getLoginRequest","loginPass","store","getState","response","status","X-Authorization","token","dispatch","showLogin","isLogin","records","CreateInstallationsDataObject","console","log","installationResponce","newDataObj","map","e","params","siteName","name","extended","idDataAttribute","code","description","value","formattedValue","updateTimerId","updateInstallations","setInstObj","time","arguments","length","undefined","setTimeout","setInterval","passInput","React","createRef","LoginField","isActive","onChangeLogin","onChangeParol","react_default","a","createElement","TextField","autoFocus","placeholder","onChange","target","onKeyDown","keyCode","current","focus","inputRef","type","Button","color","onClick","ShowOnLogin","logout","Login","_this$props","this","props","className","login_field","showOnlogin","Component","mapDispatchToProps","connect","buttonText","site","date","Date","last_timestamp","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","alarm","dataFilterParams","dataFilterEnergie","SmallSiteData","filter","elem","indexOf","energie","key","ButtonForSite","selectInst","selectedInst","disabled","installations_list_SmallSiteData","InstallationList","installations_list_ButtonForSite","setInst","installationSelector","InstallationDetail","id","instData","Installations","clearInterval","clearTimeout","react_router","push","to","installations_list","installationDetails","MainMenu","dashboards","hide","toggleHide","setDashboardId","setDashboardName","clearNewDashboard","onMouseLeave","react_router_dom","dashboard","setCoord","newState","assign","in","X","Y","dragX","dragY","mouseCoordSelector","setElement","clearElement","param","newDashboardElement_handleActions","paramName","newElementSelector","ConstructorElement","element","setMouseCoordinate","setNewElement","deleteElement","newDashboard","editElement","instDataObject","style","position","left","top","onMouseDown","ev","clientX","currentTarget","getBoundingClientRect","clientY","onDoubleClick","prompt","IconButton","newName","Edit_default","alert","Info_default","window","confirm","Close_default","DashboardInConstructor","delete","setElemToNewDashboard","setNewDashboard","editElemInNewDashboard","deleteElemInNewDashboard","newDashboard_handleActions","toConsumableArray","_ref4","_ref5","newDashboardSelector","setDashboard","loadDashboards","deleteDashboard","dashboards_handleActions","dashboardsSelector","clearDashboardName","dashboardName_handleActions","dashboardNameSelector","clearDashboardId","dashboardId_handleActions","dashboardIdSelector","LevitateElement","newElement","coord","setToNewDashboard","newElementInitialState","onMouseUp","ConstructorField","height","width","cursor","onMouseMove","onMouseEnter","Constructor","urlParam","queryString","parse","location","search","parseInt","dashboardName","dashboardId","Select","native","inputProps","input","OutlinedInput","hidden","dataArray","elementTargetParamSet","constructorField","bottom","zIndex","filterNewDashboard","Dashboard","_this","history","mapDispathToProps","installationsResponce","toggleMainMenu","hideMainMenuSelector","mainTheme","createMuiTheme","palette","primary","lightBlue","secondary","orange","Page404","App","rawloginVRM","localStorage","getItem","rawInst","rawDashboards","rawinstallationsObjectData","setIsLogin","JSON","setDashboards","hideMainMenu","ThemeProvider","theme","basename","exact","path","component","mapDispatchtoProps","Boolean","hostname","match","reducers","loginField","loginInput","loginVRM","installationsVRM","installationsObjectData","mouseCoordinates","newDashboardElement","filterToLocalStorageLog","_filterToLocalStorage","actionsToLocalStorage","logToLocalStorage","next","action","returnValue","stringify","setItem","createMiddlewares","__webpack_require__","d","__webpack_exports__","middlewares","createStore","combineReducers","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"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","file":"static/js/main.cec81e6a.chunk.js","sourcesContent":["\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_SWITH = 'LOGIN_FIELD/SET_SWITH';\r\n\r\nconst REDUCER_NAME = 'loginField';\r\n\r\nexport const setSwith = createAction(SET_SWITH);\r\n\r\nconst initialState = true;\r\n\r\nexport default handleActions({\r\n    [setSwith]: (state, {payload}) => !state,\r\n}, initialState);\r\n\r\nexport const loginShowSelector = state => state[REDUCER_NAME];","import {handleActions, createAction} from \"redux-actions\";\r\nimport {testLogin, testPass} from \"./testLoginPass\";\r\n\r\nconst SET_LOGIN = \"LOGIN_INPUT/SET_LOGIN\";\r\nconst SET_PAROL = \"LOGIN_INPUT/ET_PAROL\";\r\nconst CLEAR_PASS = \"LOGIN_INPUT/CLEAR_PASS\"\r\n\r\nconst REDUCER_NAME = \"loginInput\";\r\n\r\nexport const setLogin = createAction(SET_LOGIN);\r\nexport const setParol = createAction(SET_PAROL);\r\nexport const clearPass = createAction(CLEAR_PASS);\r\n\r\nconst initialState = { login : testLogin || \"\" , pass : testPass || \"\" };\r\nconst clear = { login : \"\" , pass : \"\" }\r\n\r\nexport default handleActions({\r\n    [setLogin] : (state, { payload }) => ({ login : payload , pass : state.pass}),\r\n    [setParol] : (state, { payload }) => ({ login: state.login, pass: payload}),\r\n    [clearPass] : (state, { payload }) => (clear),\r\n}, initialState);\r\n\r\nexport const loginPassSelector = state => state[REDUCER_NAME];","export const testLogin = '175.com.ua@gmail.com';\r\nexport const testPass = 'Ww9TArkV!dndv53';","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_ISNTLOGIN = \"LOGIN_VRM/SET_ISNTLOGIN\";\r\nconst SET_TOKEN = \"LOGIN_VRM/SET_TOKEN\";\r\n// const SET_ISLOGIN = \"LOGIN_VRM/SET_ISLOGIN\";\r\n\r\nconst REDUCER_NAME = \"loginVRM\";\r\n\r\nexport const setIsntLogin = createAction(SET_ISNTLOGIN);\r\nexport const setToken = createAction(SET_TOKEN);\r\n\r\n\r\nconst initialState = {islogin: false, username: \"\", idUser: null, headerWithToken: {} };\r\n\r\n\r\nexport default handleActions({\r\n    [setIsntLogin] : (state, { payload }) =>  initialState,\r\n    [setToken] : (state, { payload }) => payload,\r\n}, initialState);\r\n\r\nexport const isLoginSelector = state => state[REDUCER_NAME];","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_INSTALLATIONS = \"INSTALLATIONS_VRM/SET_INSTALLATIONS\";\r\n\r\nconst REDUCER_NAME = \"installationsVRM\";\r\n\r\nexport const setInstallations = createAction(SET_INSTALLATIONS);\r\n\r\n\r\nconst initialState = {data: {success: false}};\r\n\r\n\r\nexport default handleActions({\r\n    [setInstallations] : (state, { payload }) => payload ,\r\n}, initialState);\r\n\r\nexport const installationsSelector = state => state[REDUCER_NAME];","import {handleActions, createAction} from \"redux-actions\";\r\n\r\nexport const SET_DATA = \"INSTALLATIONS_OBJECT_DATA/SET_DATA\";\r\n\r\nconst REDUCER_NAME = \"installationsObjectData\";\r\n\r\nexport const setInstallationObjectData = createAction(SET_DATA);\r\n\r\nconst initialState = {};\r\n\r\nexport default handleActions({\r\n    [setInstallationObjectData] : (state, { payload }) => payload,\r\n}, initialState);\r\n\r\nexport const instDataObjectSelector = state => state[REDUCER_NAME];","import axios from \"axios\";\r\nimport React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { setToken } from \"../reducers/loginVRM\";\r\nimport { setInstallations } from \"../reducers/installationsVRM\";\r\nimport { setInstallationObjectData } from \"../reducers/installationsObjectData\";\r\nimport { setSwith as showLogin } from \"../reducers/loginField\";\r\nimport { loginPassSelector } from \"../reducers/loginInput\";\r\nimport { store } from \"../index.js\";\r\n\r\n\r\n//APIs\r\n\r\nconst targetUrl = \"https://vrmapi.victronenergy.com\";\r\nconst authApi = \"/v2/auth/login\";\r\n\r\nexport function formInstallationsApi(idUser){\r\n    return `${targetUrl}/v2/users/${idUser}/installations?extended=1`;\r\n}\r\n\r\nfunction formInstallationOwerviewApi(idSite){\r\n    return `${targetUrl}/v2/installations/${idSite}/system-overview`;\r\n}\r\n\r\n\r\nexport const getInstallations = FormRequestToVRM(formInstallationsApi);\r\n\r\nexport const getInstallationData = FormRequestToVRM(formInstallationOwerviewApi)\r\n\r\n\r\nfunction FormRequestToVRM(formURL) {\r\n    return (urlKey, headerWithToken) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios({\r\n                method:'get',\r\n                url: formURL(urlKey),\r\n                headers: headerWithToken\r\n            })\r\n            .then((responce) => {\r\n                resolve(responce);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport function getLoginRequest() { //loginPass_1, setToken_1, showLogin_1, setInstallations_1, setInstallationObjectData_1){\r\n    const loginPass = loginPassSelector(store.getState());\r\n    // console.log(loginPass);\r\n    return new Promise((resolve, reject) => {\r\n        axios({\r\n            method:'post',\r\n            url: targetUrl + authApi,\r\n            data: `{\"username\": \"${loginPass.login}\", \"password\": \"${loginPass.pass}\"}`\r\n        })\r\n        .then(response => {\r\n            if (response.status === 200){\r\n                const headerWithToken = {'X-Authorization' : 'Bearer ' + response.data.token};\r\n                const idUser = response.data.idUser;\r\n                // showLogin();\r\n                store.dispatch(showLogin());\r\n                const isLogin = {islogin: true, username: loginPass.login, idUser: idUser, headerWithToken};\r\n                getInstallations(isLogin.idUser, isLogin.headerWithToken).then((responce) => {\r\n                    // setToken(isLogin);\r\n                    store.dispatch(setToken(isLogin));\r\n                    // setInstallations(responce);\r\n                    store.dispatch(setInstallations(responce));\r\n                    if (responce.data && responce.data.records) {\r\n                        CreateInstallationsDataObject(responce);\r\n                    }\r\n                });\r\n                resolve(true);\r\n        }})\r\n        .catch(function(err){\r\n            console.log(`login error: ${err}`);\r\n            return null;\r\n        });\r\n    });\r\n};\r\n\r\n\r\n\r\nexport function CreateInstallationsDataObject(installationResponce) { //, setInstallationObjectData_1) {\r\n    const newDataObj = {};\r\n    installationResponce.data.records.map((e) => {\r\n        const params = {siteName: e.name};\r\n        e.extended.map((data) => {\r\n            params[data.idDataAttribute || data.code] = { name: data.description, value: data.formattedValue}\r\n        });\r\n        newDataObj[e.idSite] = params;\r\n    })\r\n    // setInstallationObjectData(newDataObj);\r\n    store.dispatch(setInstallationObjectData(newDataObj));\r\n    return newDataObj;\r\n};\r\n\r\n\r\nexport let updateTimerId = null;\r\n\r\nexport function updateInstallations(isLogin, setInstallations, setInstObj, time=10000){\r\n    updateTimerId = setTimeout(() => {\r\n        updateTimerId = setInterval(() => {\r\n            if (isLogin.islogin) {\r\n                getInstallations (isLogin.idUser, isLogin.headerWithToken).then((responce) => {\r\n                    // console.log(\"--- Auto request ---\");\r\n                    setInstallations(responce);\r\n                    if (setInstObj) {\r\n                        CreateInstallationsDataObject(responce, setInstObj);\r\n                    }\r\n\r\n                });\r\n            }\r\n        }, time);\r\n    }, time);\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { getLoginRequest,  } from \"../containers/apiVRM\";\r\nimport { Button, Input, TextField, InputAdornment } from \"@material-ui/core\";\r\n// import AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n\r\n\r\nconst loginPlaceholder = \"login or email:\";\r\nconst parolPlaceholder = \"password\";\r\nconst buttonText = \"Login\"\r\n\r\n\r\nconst passInput = React.createRef();\r\n\r\nconst LoginField = ({ isActive, onChangeLogin, onChangeParol, \r\n    loginPass }) => {\r\n    if (!isActive) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField\r\n                // InputProps={{startAdornment: (\r\n                //     <InputAdornment position=\"start\">\r\n                //         <AccountCircle />\r\n                //     </InputAdornment>\r\n                // )}}\r\n                autoFocus = {true}\r\n                // name={loginPlaceholder} \r\n                placeholder={loginPlaceholder} \r\n                onChange={({target: { value }}) => console.log(value) || onChangeLogin(value)} \r\n                onKeyDown={ e => {\r\n                    if (e.keyCode === 13) {\r\n                        passInput.current.focus();\r\n                    }\r\n                }}\r\n                value={loginPass.login} />\r\n            </div>\r\n           <div>\r\n                <TextField\r\n                inputRef = {passInput}\r\n                type=\"password\"\r\n                // label={parolPlaceholder}\r\n                placeholder={parolPlaceholder}\r\n                onChange={({target: { value }}) => onChangeParol(value)}\r\n                onKeyDown={ e => {\r\n                    if (e.keyCode === 13) {\r\n                        getLoginRequest()\r\n                    }\r\n                }} \r\n                value={loginPass.pass} />\r\n           </div>\r\n            <div>\r\n                <Button\r\n                color=\"primary\"\r\n                onClick={() => getLoginRequest() }\r\n                >{buttonText}</Button>\r\n            </div>   \r\n        </div>\r\n    );\r\n};\r\n\r\nLoginField.propTypes = {\r\n    isActive: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    loginPass: PropTypes.object,\r\n    toLogin: PropTypes.func\r\n};\r\n\r\nexport default LoginField;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\nconst ShowOnLogin = ({ isLogin, logout }) => {\r\n    if (isLogin.islogin) {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {isLogin.username}\r\n                </div>\r\n                <div>\r\n                    <Button color=\"secondary\" onClick={logout}>Exit</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ShowOnLogin;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { loginShowSelector, setSwith } from \"../reducers/loginField\";\r\nimport { loginPassSelector, setLogin, setParol} from \"../reducers/loginInput\";\r\nimport { setIsntLogin, setToken, isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { setInstallations } from \"../reducers/installationsVRM\";\r\nimport LoginField from \"../components/login-field\";\r\nimport ShowOnLogin from \"../components/showOnlogin\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { setInstallationObjectData } from \"../reducers/installationsObjectData\";\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n    render() {\r\n        const { showLogin, isActive, onChangeLogin, \r\n            onChangeParol, loginPass, isLogin, logout } = this.props; \r\n        return(\r\n            <div className=\"login\">\r\n                <div>\r\n                    <Button color=\"secondary\" onClick={() => showLogin(isActive)}>Login</Button>\r\n                </div>\r\n                <LoginField \r\n                isActive={isActive}\r\n                onChangeLogin={onChangeLogin}\r\n                onChangeParol={onChangeParol}\r\n                loginPass={loginPass}\r\n                />\r\n                <div>\r\n                    <ShowOnLogin \r\n                    isLogin={isLogin}\r\n                    logout={logout} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes ={\r\n    showLogin: PropTypes.func,\r\n    isActive: PropTypes.bool,\r\n    onChangeLogin: PropTypes.func,\r\n    onChangeParol: PropTypes.func,\r\n    loginPass: PropTypes.object,\r\n    isLogin: PropTypes.object,\r\n    logout: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n}\r\n\r\nconst mapDispatchToProps = ({\r\n    showLogin: setSwith,\r\n    onChangeLogin: setLogin,\r\n    onChangeParol: setParol,\r\n    logout: setIsntLogin,\r\n    setInstallationObjectData: setInstallationObjectData,\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    isActive: loginShowSelector(state),\r\n    loginPass: loginPassSelector(state),\r\n    isLogin: isLoginSelector(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getInstallationData } from \"../containers/apiVRM\";\r\n// import { TextField } from \"@material-ui/core\";\r\n\r\n\r\nconst buttonText = (site) => {\r\n    const date = new Date(site.last_timestamp * 1000);\r\n    const year = date.getFullYear();\r\n    const month = ((date.getMonth()+1) > 9)? date.getMonth() + 1: \"0\" + (date.getMonth() + 1);\r\n    const day = (date.getDate() > 9)? date.getDate(): \"0\" + date.getDate();\r\n    const hour = (date.getHours() > 9)? date.getHours(): \"0\" + date.getHours();\r\n    const minute = (date.getMinutes() > 9)? date.getMinutes(): \"0\" + date.getMinutes();\r\n\r\n    if (site.alarm === true ) {\r\n        return `${site.name} ( last connect: ${hour}:${minute} ${day}.${month}.${year} ) !alarm!`;\r\n    }\r\n    return `${site.name} ( last connect: ${hour}:${minute} ${day}.${month}.${year} )`;\r\n};\r\n    \r\nconst dataFilterParams = [143, 215];\r\nconst dataFilterEnergie = [\"consumption\", \"solar_yield\", \"from_to_grid\"];\r\n\r\nconst SmallSiteData = ({ extended }) => {\r\n    const params = extended.filter(elem => (dataFilterParams.indexOf(elem.idDataAttribute) !== -1));\r\n    // console.log(extended);\r\n    const energie = (extended.filter(elem => (dataFilterEnergie.indexOf(elem.code) !== -1)));\r\n    // console.log(energie);\r\n    const data = params.concat(energie);\r\n    // console.log(data);\r\n    return (\r\n        <div className=\"small-site-data\">\r\n            {data.map((data) => (\r\n                <div key={data.idDataAttribute || data.code}>{data.description} {data.formattedValue}</div>\r\n                // <TextField type=\"checkbox\" key={data.idDataAttribute} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ButtonForSite = ({ site, selectInst, selectedInst, isLogin }) => {\r\n    if (site.idSite === selectedInst) {\r\n        return (\r\n            <div> \r\n            <Button\r\n                color=\"primary\"\r\n                disabled\r\n            >{buttonText(site)}</Button>\r\n            <SmallSiteData\r\n            extended={site.extended} />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n        <Button\r\n            color=\"primary\" \r\n            onClick={() => {\r\n                selectInst(site.idSite);\r\n                // getInstallationData(site.idSite, isLogin.headerWithToken).then((responce) => {\r\n                //     const data = {}\r\n                //     // console.log(responce);\r\n                //     data[site.idSite] = responce;\r\n                // })\r\n            }}\r\n        >{buttonText(site)}</Button>\r\n        <SmallSiteData\r\n        extended={site.extended} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InstallationList = ({ installationResponce, selectInst, selectedInst, isLogin }) => {\r\n    if (installationResponce){\r\n        if (installationResponce.data.success) {\r\n            return (\r\n                <div className=\"installation-menu\">\r\n                {installationResponce.data.records.map((site) => (\r\n                    <div key={site.idSite}>\r\n                        <ButtonForSite\r\n                        site={site}\r\n                        selectInst={selectInst}\r\n                        selectedInst={selectedInst}\r\n                        isLogin={isLogin} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n                \r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>Can`t receive installations list</div>\r\n    );\r\n};\r\n\r\nexport default InstallationList;","\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_INST = 'SELECTED_INST/SET_INST';\r\n\r\nconst REDUCER_NAME = 'selectedInst';\r\n\r\nexport const setInst = createAction(SET_INST);\r\n\r\nconst initialState = null;\r\n\r\nexport default handleActions({\r\n    [setInst]: (state, {payload}) => (payload),\r\n}, initialState);\r\n\r\nexport const installationSelector = state => state[REDUCER_NAME];","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { installationSelector } from \"../reducers/selectedInst\";\r\nimport { installationsSelector } from \"../reducers/installationsVRM\";\r\n\r\n// function FilterIdSite(props) {\r\n//     const { id, instData } = props;\r\n//     console.log(instData);\r\n//     const choosenSite = JSON.stringify(instData.data.records);\r\n//     return (\r\n//         <div>\r\n//             {choosenSite}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n\r\nclass InstallationDetail extends React.Component {\r\n    render(){\r\n        const { id, instData } = this.props;\r\n        // console.log(instData);\r\n        if (instData.data.success) {\r\n            return (\r\n                <div className='installation-details'>\r\n                    {/* <FilterIdSite\r\n                    id={id}\r\n                    instData={instData}\r\n                    /> */}\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n};\r\n\r\nInstallationDetail.propTypes = {\r\n    id: PropTypes.number,\r\n    instData: PropTypes.object\r\n\r\n};\r\n\r\n\r\nconst mapDispatchToProps = ({\r\n\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    id: installationSelector(state),\r\n    instData: installationsSelector(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InstallationDetail);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport InstallationList from \"../components/installations-list\";\r\nimport { setInst, installationSelector } from \"../reducers/selectedInst\";\r\nimport InstallationDetails from \"./installationDetails\";\r\nimport { installationsSelector, setInstallations } from \"../reducers/installationsVRM\";\r\nimport { updateTimerId, updateInstallations } from \"./apiVRM\";\r\nimport { setInstallationObjectData } from \"../reducers/installationsObjectData\";\r\n\r\n\r\n\r\n\r\nclass Installations extends React.Component {\r\n    componentWillUnmount(){\r\n        clearInterval(updateTimerId);\r\n        clearTimeout(updateTimerId);\r\n    };\r\n\r\n    componentWillMount(){\r\n        updateInstallations(this.props.isLogin, this.props.setInstallations, this.props.setInstallationObjectData );\r\n    };\r\n\r\n    render(){\r\n        const { isLogin, installationResponce, selectInst, selectedInst } = this.props;\r\n\r\n        if (!isLogin.islogin) {\r\n            return (\r\n                <div className=\"inner-warning\">Please login first!</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"installations\">\r\n                <Redirect push to=\"/sites\" />\r\n                <InstallationList \r\n                installationResponce={installationResponce}\r\n                selectInst={selectInst} \r\n                selectedInst={selectedInst}\r\n                isLogin={isLogin} />\r\n                <InstallationDetails />\r\n            </div>\r\n        )\r\n        \r\n    };\r\n};\r\n\r\nInstallations.propTypes = {\r\n    isLogin: PropTypes.object,\r\n    installationResponce: PropTypes.object,\r\n    selectInst: PropTypes.func,\r\n    selectedInst: PropTypes.number,\r\n    setInstallations: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLogin: isLoginSelector(state),\r\n    installationResponce: installationsSelector(state),\r\n    selectedInst: installationSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectInst: setInst,\r\n    setInstallations: setInstallations, \r\n    setInstallationObjectData: setInstallationObjectData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Installations);\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\n\r\nexport function MainMenu({ dashboards, hide, toggleHide, setDashboardId,\r\n    setDashboardName, clearNewDashboard }) {\r\n    if (hide) {\r\n        return (\r\n            <div>\r\n                <Button \r\n                color=\"primary\"\r\n                className=\"main-menu-button\"\r\n                onClick={toggleHide}>\r\n                    Menu\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div onMouseLeave={toggleHide}>\r\n            <Button \r\n            color=\"primary\"\r\n            className=\"main-menu-button\"\r\n            onClick={toggleHide}>\r\n                hide menu\r\n            </Button>\r\n            <div className=\"main-menu\">\r\n                <Link \r\n                to=\"/sites\" \r\n                onClick={toggleHide}>\r\n                    <div className=\"main-menu-base-elem\">\r\n                        Go to main\r\n                    </div>\r\n                </Link>       \r\n                {dashboards.map( (dashboard, id) => {\r\n                    if (dashboard) {    \r\n                        return (\r\n                            <Link \r\n                            key={id}\r\n                            to={`/dashboards/?id=${dashboard.id}`} \r\n                            onClick={toggleHide}>\r\n                                <div className=\"main-menu-elem\">\r\n                                    {dashboard.name}\r\n                                </div>\r\n                            </Link>     \r\n                        );\r\n                    }\r\n                    return null;\r\n                })}\r\n                <Link \r\n                to=\"/newdashboard\" \r\n                onClick={() => {\r\n                    toggleHide();\r\n                    setDashboardId(dashboards.length);\r\n                    setDashboardName(`Dashboard #${dashboards.length}`);\r\n                    clearNewDashboard();\r\n                }}>\r\n                    <div className=\"main-menu-base-elem\">\r\n                        Create Dashboard\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};","\r\nimport { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_COORD = 'MOUSE_COORD/SET_COORD';\r\n\r\nconst REDUCER_NAME = 'mouseCoordinates';\r\n\r\nexport const setCoord = createAction(SET_COORD);\r\n\r\nconst initialState = {in:true, X: 0, Y: 0, dragX: 0, dragY: 0};\r\n\r\nexport default handleActions({\r\n    [setCoord]: (state, { payload }) => {\r\n        const newState = Object.assign({}, state);\r\n        for (let key in payload) {\r\n            newState[key] = payload[key];\r\n        } \r\n        return newState;\r\n    },\r\n}, initialState);\r\n\r\nexport const mouseCoordSelector = state => state[REDUCER_NAME];","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_ELEMENT = 'NEW_ELEMENT/SET_ELEMENT';\r\nconst CLEAR_ELEMENT = 'NEW_ELEMENT/CLEAR_ELEMENT';\r\n\r\nconst REDUCER_NAME = 'newDashboardElement';\r\n\r\nexport const setElement = createAction(SET_ELEMENT);\r\nexport const clearElement = createAction(CLEAR_ELEMENT);\r\n\r\nexport const initialState = { idSite:\"-\", param: \"-\" };\r\n\r\nexport default handleActions({\r\n    [setElement]: (state, { payload }) => {\r\n        return(\r\n            { \r\n                idSite: payload.idSite || state.idSite, \r\n                param: payload.param || state.param, \r\n                name: (payload.name === \"\")? \"\" : payload.name || state.name,\r\n                paramName: payload.paramName || state.paramName,\r\n                value: payload.value || state.value\r\n            }\r\n            )},\r\n    [clearElement]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const newElementSelector = state => state[REDUCER_NAME];","import React from \"react\";\r\nimport Close from \"@material-ui/icons/Close\";\r\n// import MoveIcon from \"@material-ui/icons/OpenWith\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { Input, Button, TextField, Select, OutlinedInput, IconButton } from \"@material-ui/core\";\r\n\r\n\r\nexport default function ConstructorElement (props) {\r\n    const { element, setMouseCoordinate, setNewElement, deleteElement,\r\n        newDashboard, editElement, instDataObject, id } = props;\r\n    if (!element) {\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <div className=\"constructor-element\"\r\n        style={{position: 'absolute', left: element.X, top: element.Y}}\r\n        key={id}>\r\n            <div \r\n            onMouseDown={(ev) => {\r\n                setMouseCoordinate({\r\n                    dragX: ev.clientX - ev.currentTarget.getBoundingClientRect().left,\r\n                    dragY: ev.clientY - ev.currentTarget.getBoundingClientRect().top\r\n                });\r\n                setNewElement(newDashboard[id].element);\r\n                deleteElement(id);\r\n            }}\r\n            onDoubleClick={(ev) => {\r\n                const newName = prompt(\"Monitor name:\", element.element.name);\r\n            }}>\r\n                {`${element.element.name} : ${element.element.value}`}  \r\n            </div>\r\n            <div>\r\n                <IconButton\r\n                className='edit-elem-button'\r\n                onClick={() => {\r\n                    const newName = prompt(\"Monitor name:\", element.element.name);\r\n                    if (newName) {\r\n                        editElement({ id: id, element: { name: newName}})\r\n                    }\r\n                }}>\r\n                    <EditIcon />\r\n                </IconButton >\r\n            </div>\r\n            <div>\r\n                <IconButton \r\n                className='info-elem-button'\r\n                onClick={() => {\r\n                    console.log(element);\r\n                    alert(`\r\n                    monitor name: ${element.element.name}\r\n                    site: ${instDataObject[element.element.idSite].siteName}\r\n                    parameter: ${instDataObject[element.element.idSite][element.element.param].name}\r\n                    value example: ${instDataObject[element.element.idSite][element.element.param].value}`)}}>\r\n                    <InfoIcon />\r\n                </IconButton>\r\n            </div>\r\n            <div>\r\n                <IconButton \r\n                className='delete-elem-button'\r\n                onClick={() => {\r\n                    const confirm = window.confirm('Do You want delete element?');\r\n                    if (confirm) {\r\n                        deleteElement(id);\r\n                    }\r\n                }}>\r\n                    <Close />\r\n                </IconButton>\r\n            </div>   \r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport ConstructorElement from \"./constructorElement\";\r\n\r\n\r\n\r\n\r\nexport default function DashboardInConstructor({ newDashboard, editElement, deleteElement, \r\n    setMouseCoordinate, setNewElement, instDataObject }) {\r\nreturn (\r\n<div className=\"dashboard\">\r\n    <div className=\"constructor-help-text\">\r\n        <p>Choose site and parameter to add element.</p>\r\n        <p>To move element hold mouse button and drag.</p>\r\n    </div>\r\n    \r\n{newDashboard.map((elem, id) => {\r\n    if (elem.delete) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <ConstructorElement\r\n        element={elem}\r\n        setMouseCoordinate={setMouseCoordinate}\r\n        setNewElement={setNewElement}\r\n        deleteElement={deleteElement}\r\n        newDashboard={newDashboard}\r\n        editElement={editElement}\r\n        instDataObject={instDataObject}\r\n        id={id}\r\n        key={id} />\r\n    \r\n    )\r\n})}\r\n</div>\r\n)\r\n};","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nconst SET_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/SET_DASHBOARD_ELEMENT';\r\nconst SET_DASHBOARD = 'NEW_DASHBOARD/SET_DASHBOARD';\r\nconst EDIT_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/EDIT_DASHBOARD_ELEMENT';\r\nconst DELETE_DASHBOARD_ELEMENT = 'NEW_DASHBOARD/DELETE_DASHBOARD_ELEMENT';\r\nconst CLEAR_DASHBOARD = 'NEW_DASHBOARD/CLEAR_DASHBOARD';\r\n\r\nconst REDUCER_NAME = 'newDashboard';\r\n\r\nexport const setElemToNewDashboard = createAction(SET_DASHBOARD_ELEMENT);\r\nexport const setNewDashboard = createAction(SET_DASHBOARD);\r\nexport const editElemInNewDashboard = createAction(EDIT_DASHBOARD_ELEMENT);\r\nexport const deleteElemInNewDashboard = createAction(DELETE_DASHBOARD_ELEMENT);\r\nexport const clearNewDashboard = createAction(CLEAR_DASHBOARD);\r\n\r\nconst initialState = [];\r\n\r\nexport default handleActions({\r\n    [setElemToNewDashboard]: (state, { payload }) => [...state, payload],\r\n    [setNewDashboard]: (state, { payload }) => payload,\r\n    [clearNewDashboard]: (state, { payload }) => initialState,\r\n    [editElemInNewDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        for (let key in payload.element) {\r\n            newState[payload.id].element[key] = payload.element[key];\r\n        }\r\n        return newState;\r\n    },\r\n    [deleteElemInNewDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        newState[payload].delete = true;\r\n        return newState;\r\n    },\r\n}, initialState);\r\n\r\nexport const newDashboardSelector = state => state[REDUCER_NAME];","import { handleActions, createAction} from \"redux-actions\";\r\n\r\n\r\nexport const SET_DASHBOARD = 'DASHBOARDS/SET_DASHBOARD';\r\nconst LOAD_DASHBOARDS = 'DASHBOARDS/LOAD_DASHBOARDS';\r\nconst EDIT_DASHBOARD = 'DASHBOARDS/EDIT_DASHBOARD';\r\nconst DELETE_DASHBOARD = 'DASHBOARDS/DELETE_DASHBOARD';\r\n\r\nconst REDUCER_NAME = 'dashboards';\r\n\r\nexport const setDashboard = createAction(SET_DASHBOARD);\r\nexport const loadDashboards = createAction(LOAD_DASHBOARDS);\r\nexport const editDashboard = createAction(EDIT_DASHBOARD);\r\nexport const deleteDashboard = createAction(DELETE_DASHBOARD);\r\n\r\nconst initialState = [];\r\n\r\nexport default handleActions({\r\n    [setDashboard]: (state, { payload })  => {\r\n        let newState = [...state];\r\n        newState[payload.id] = {dashboard: payload.dashboard,\r\n        name: payload.name, id: payload.id};\r\n        return newState;\r\n    },\r\n    [loadDashboards]: (state, { payload }) => payload,\r\n    [deleteDashboard]: (state, { payload }) => {\r\n        let newState = [...state];\r\n        newState[payload] = \"\";\r\n        return newState;\r\n    },\r\n}, initialState);\r\n\r\nexport const dashboardsSelector = state => state[REDUCER_NAME];","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"dashboardName\";\r\n\r\nconst SET_NAME = \"DASHBOARD_NAME/SET_NAME\";\r\nconst CLEAR_NAME = \"DASHBOARD_NAME/CLEAR_NAME\";\r\n\r\nexport const setDashboardName = createAction(SET_NAME);\r\nexport const clearDashboardName = createAction(CLEAR_NAME);\r\n\r\nconst initialState = \"newDashboard\";\r\n\r\nexport default handleActions({\r\n    [setDashboardName]: (state, { payload }) => payload,\r\n    [clearDashboardName]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const dashboardNameSelector = state => state[REDUCER_NAME];","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"dashboardId\";\r\n\r\nconst SET_ID = \"DASHBOARD_NAME/SET_ID\";\r\nconst CLEAR_ID = \"DASHBOARD_NAME/CLEAR_ID\";\r\n\r\nexport const setDashboardId = createAction(SET_ID);\r\nexport const clearDashboardId = createAction(CLEAR_ID);\r\n\r\nconst initialState = null;\r\n\r\nexport default handleActions({\r\n    [setDashboardId]: (state, { payload }) => payload,\r\n    [clearDashboardId]: (state, { payload }) => initialState,\r\n}, initialState);\r\n\r\nexport const dashboardIdSelector = state => state[REDUCER_NAME];    ","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { mouseCoordSelector, setCoord } from \"../reducers/mouseCoordinates\";\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { Input, Button, TextField, Select, OutlinedInput, IconButton } from \"@material-ui/core\";\r\nimport { installationsSelector } from \"../reducers/installationsVRM\";\r\nimport { setElement, newElementSelector, clearElement, initialState as newElementInitialState } from \"../reducers/newDashboardElement\";\r\nimport { CreateInstallationsDataObject } from \"./apiVRM\";\r\n// import ConstructorElement from \"./constructorElement\";\r\nimport DashboardInConstructor from \"../components/dashboardInConstructor\";\r\n\r\nimport { newDashboardSelector, setElemToNewDashboard, editElemInNewDashboard, deleteElemInNewDashboard, clearNewDashboard, setNewDashboard } from \"../reducers/newDashboard\";\r\nimport { dashboardsSelector, setDashboard } from \"../reducers/dashboards\";\r\nimport { dashboardNameSelector, setDashboardName } from \"../reducers/dashboardName\";\r\nimport { dashboardIdSelector, setDashboardId } from \"../reducers/dashboardId\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport MoveIcon from \"@material-ui/icons/OpenWith\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { instDataObjectSelector } from \"../reducers/installationsObjectData\";\r\nimport queryString from \"query-string\";\r\n\r\n\r\n\r\nfunction LevitateElement({ newElement, coord, setToNewDashboard, clearElement, setMouseCoordinate }) {\r\n    if (!coord.in && !coord.dragX && !coord.dragY) {\r\n        return null;\r\n    }\r\n    if (coord.Y < 0) {\r\n        return null;\r\n    }\r\n    if (newElement === newElementInitialState) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div \r\n        style={{\r\n            position: 'absolute', \r\n            left: `${coord.X - coord.dragX}px`, \r\n            top: `${coord.Y - coord.dragY}px`}}\r\n            // onClick={(ev) => {\r\n            //     console.log(\"click\");\r\n            //     if ( newElement.idSite !== newElementInitialState.idSite \r\n            //         && newElement.param !== newElementInitialState.param ) {\r\n            //         setToNewDashboard({element: newElement, X: coord.X, Y: coord.Y});\r\n            //         clearElement();\r\n            //     }}}\r\n            onMouseUp={(ev) => {\r\n                if ( newElement.idSite !== newElementInitialState.idSite \r\n                    && newElement.param !== newElementInitialState.param ) {\r\n                    setToNewDashboard({element: newElement, X: coord.X - coord.dragX, Y: coord.Y - coord.dragY});\r\n                    clearElement();\r\n                }\r\n                // console.log(\"mouseup\");\r\n                setMouseCoordinate({ dragX: 0, dragY: 0 });\r\n            }} >\r\n                {newElement.name || \"choose monitor\"} : {newElement.value || \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nclass ConstructorField extends React.Component {\r\n    componentDidUpdate(){\r\n        // console.log(\"--- ConsructorField did update ---\");\r\n    }\r\n    render(){\r\n        const { setMouseCoordinate, coord, newElement, setToNewDashboard, clearElement } = this.props;\r\n        return (\r\n            <div \r\n            className=\"constructor-field\"\r\n            style={{position: 'relative', \r\n                        height: \"-webkit-fill-available\",\r\n                        width: '100%', \r\n                        cursor: 'crosshair'}} \r\n            onMouseMove={(ev) => {\r\n                setMouseCoordinate({ \r\n                    in: true,\r\n                    X: ev.clientX - ev.currentTarget.getBoundingClientRect().left,\r\n                    Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n                    // console.log(coord);\r\n                }\r\n            }\r\n            onMouseEnter={(ev) => {\r\n                setMouseCoordinate({ in: true });\r\n            }}\r\n            onMouseLeave={(ev) => {\r\n                setMouseCoordinate({ \r\n                    in: false, \r\n                    X: ev.clientX, \r\n                    Y: ev.clientY - ev.currentTarget.getBoundingClientRect().top});\r\n            }}\r\n            // onClick={(ev) => console.log(\"--- ConstructorField Click ---\")}\r\n            >\r\n\r\n            <LevitateElement\r\n            setMouseCoordinate={setMouseCoordinate}\r\n            coord={coord}\r\n            newElement={newElement}\r\n            setToNewDashboard={setToNewDashboard}\r\n            clearElement={clearElement} />    \r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nConstructorField.propTypes = {\r\n    coord: PropTypes.object,\r\n    setMouseCoordinate:PropTypes.func,\r\n    newElement: PropTypes.object,\r\n    setToNewDashboard: PropTypes.func,\r\n    clearElement: PropTypes.func,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    coord: mouseCoordSelector(state),\r\n    newElement: newElementSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setMouseCoordinate: setCoord,\r\n    setToNewDashboard: setElemToNewDashboard,\r\n    clearElement: clearElement,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConstructorField);\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { mouseCoordSelector, setCoord } from \"../reducers/mouseCoordinates\";\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { Input, Button, TextField, Select, OutlinedInput, IconButton } from \"@material-ui/core\";\r\nimport { installationsSelector } from \"../reducers/installationsVRM\";\r\nimport { setElement, newElementSelector, clearElement, initialState as newElementInitialState } from \"../reducers/newDashboardElement\";\r\nimport { CreateInstallationsDataObject } from \"./apiVRM\";\r\n// import ConstructorElement from \"./constructorElement\";\r\nimport DashboardInConstructor from \"../components/dashboardInConstructor\";\r\nimport ConstructorField from \"./constructorField\";\r\n\r\nimport { newDashboardSelector, setElemToNewDashboard, editElemInNewDashboard, deleteElemInNewDashboard, clearNewDashboard, setNewDashboard } from \"../reducers/newDashboard\";\r\nimport { dashboardsSelector, setDashboard } from \"../reducers/dashboards\";\r\nimport { dashboardNameSelector, setDashboardName } from \"../reducers/dashboardName\";\r\nimport { dashboardIdSelector, setDashboardId } from \"../reducers/dashboardId\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport MoveIcon from \"@material-ui/icons/OpenWith\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { instDataObjectSelector } from \"../reducers/installationsObjectData\";\r\nimport queryString from \"query-string\";\r\n\r\n\r\n\r\n\r\nconst elementTargetParamSet = (instDataObject, idSite) => {\r\n    const dataArray = [];\r\n    for (let key in instDataObject[idSite]) {\r\n        dataArray.push({ \r\n            id: key, \r\n            name: instDataObject[idSite][key].name, \r\n            value: instDataObject[idSite][key].value })\r\n    }\r\n    return dataArray;  \r\n};\r\n\r\n\r\n\r\nclass Constructor extends React.Component {\r\n    componentWillMount() {\r\n        const urlParam = queryString.parse(this.props.location.search);\r\n        // console.log(urlParam);\r\n        if (urlParam.id) {\r\n            this.props.setNewDashboard(this.props.dashboards[urlParam.id].dashboard);\r\n            this.props.setDashboardName(this.props.dashboards[urlParam.id].name);\r\n            this.props.setDashboardId(parseInt(urlParam.id));\r\n        } else {\r\n            this.props.setDashboardId(this.props.dashboards.length)\r\n            this.props.setDashboardName(`Dashboard #${this.props.dashboards.length}`)\r\n            this.props.clearNewDashboard();\r\n        }\r\n      \r\n    };\r\n    componentWillUnmount() {\r\n        this.props.setDashboardId(null);\r\n        this.props.clearNewDashboard();\r\n\r\n    };\r\n   render(){\r\n    const { setMouseCoordinate, isLogin, installationResponce, \r\n        setNewElement, newElement, newDashboard, setToNewDashboard, \r\n        editElement, deleteElement, clearElement, dashboards, setDashboard, \r\n        dashboardName, setDashboardName, dashboardId, setDashboardId, \r\n        instDataObject } = this.props;\r\n\r\n    // const sitesData = CreateInstallationsDataObject(installationResponce);\r\n\r\n    const SiteSelect = () => {\r\n        // console.log(\"--- site select update ---\");\r\n        return (\r\n        <Select \r\n            native \r\n            inputProps={{ style: { width: \"25\" } }} \r\n            input={<OutlinedInput />} \r\n            color=\"primary\" \r\n            name='site-select' \r\n            value={newElement.idSite} \r\n            onChange={({ target: { value } }) => {\r\n            if (value !== \"-\") {\r\n                setNewElement({\r\n                    idSite: value\r\n                });\r\n            }\r\n        } }>\r\n            <option key=\"null\" value=\"-\" hidden>Choose site</option>\r\n            {installationResponce.data.records.map((site) => (\r\n                    <option key={site.idSite} value={site.idSite}>{site.name}</option>\r\n                    ))}\r\n        </Select>);\r\n    };\r\n\r\n    const ParamSelect = () => (\r\n        <Select\r\n        native\r\n        inputProps={{style: {width: \"25\"}}}\r\n        input={<OutlinedInput />}\r\n        color=\"primary\" \r\n        name='param-select' \r\n        value={newElement.param} \r\n        onChange={({target: { value }}) => {\r\n            if (newElement.idSite !== newElementInitialState.idSite && value !== newElementInitialState.param) {\r\n                setNewElement({\r\n                    param: value, \r\n                    paramName: instDataObject[newElement.idSite][value].name,\r\n                    value: instDataObject[newElement.idSite][value].value,\r\n                    name: instDataObject[newElement.idSite][value].name\r\n                })\r\n            } \r\n        }}>\r\n            <option key=\"null\" value=\"-\" hidden>\r\n            {(newElement.idSite === newElementInitialState.idSite)? \r\n            \"Choose site first\" : \"Choose parameter\"}\r\n            </option>\r\n            \r\n            {elementTargetParamSet(instDataObject, newElement.idSite).map((e) => (\r\n                        <option key={e.id} value={e.id}>{e.name}</option>))}\r\n               \r\n        </Select>\r\n    );\r\n\r\n\r\n    // if (!isLogin.islogin) {\r\n    //     return (\r\n    //         <div className=\"inner-warning\">Please login first!</div>\r\n    //     );\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{width: \"100%\"}}>\r\n                {(installationResponce.data && installationResponce.data.records)\r\n                ? (<SiteSelect />)\r\n                : (\r\n                    <div>Loading...</div>\r\n                )}\r\n                 {(installationResponce.data && installationResponce.data.records)\r\n                ? (<ParamSelect />)\r\n                : null\r\n                }\r\n                \r\n                <OutlinedInput \r\n                inputProps={{style: {width: \"-webkit-fill-available\"}}}\r\n                color=\"primary\"\r\n                placeholder={\"Edit parameter name\"}\r\n                value ={newElement.name}\r\n                onChange={({target: { value }}) => {\r\n                    // console.log(value);\r\n                    setNewElement({ \r\n                        name: value\r\n                    })\r\n                }} />\r\n            </div>\r\n            \r\n            <div style={{position: 'relative'}}>\r\n                <ConstructorField />\r\n                <DashboardInConstructor \r\n                newDashboard={newDashboard}\r\n                editElement={editElement}\r\n                deleteElement={deleteElement}\r\n                setMouseCoordinate={setMouseCoordinate}\r\n                setNewElement={setNewElement}\r\n                instDataObject={instDataObject}\r\n                 />\r\n            </div>\r\n                           \r\n            <div style={{position: 'fixed', left: \"5px\", bottom: \"5px\", zIndex: \"100\"}}>\r\n                <TextField \r\n                color=\"primary\"\r\n                onChange={({ target: { value }}) => setDashboardName(value)}\r\n                value={dashboardName}\r\n                >\r\n                </TextField>\r\n                <Button\r\n                onClick={() => {\r\n                    // console.log(newDashboard);\r\n                    const filterNewDashboard = newDashboard.filter(\r\n                        elem => (elem.delete === false || elem.delete === undefined));\r\n                    // console.log(filterNewDashboard);\r\n                    setDashboard({ \r\n                        dashboard: filterNewDashboard, \r\n                        name: dashboardName, \r\n                        id: dashboardId});\r\n                }}\r\n                >Save dashboard</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n   };\r\n};\r\n\r\nConstructor.propTypes = {\r\n    setMouseCoordinate:PropTypes.func,\r\n    isLogin: PropTypes.object,\r\n    installationResponce: PropTypes.object,\r\n    setNewElement: PropTypes.func,\r\n    newElement: PropTypes.object,\r\n    newDashboard: PropTypes.array,\r\n    setToNewDashboard: PropTypes.func,\r\n    editElement: PropTypes.func,\r\n    deleteElement: PropTypes.func,\r\n    clearElement: PropTypes.func,\r\n    dashboards: PropTypes.array,\r\n    setDashboard: PropTypes.func,\r\n    dashboardName: PropTypes.string,\r\n    setDashboardName: PropTypes.func,\r\n    dashboardId: PropTypes.number,\r\n    setDashboardId: PropTypes.func,\r\n    clearNewDashboard: PropTypes.func,\r\n    instDataObject: PropTypes.object,\r\n    setNewDashboard: PropTypes.func,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLogin: isLoginSelector(state),\r\n    installationResponce: installationsSelector(state),\r\n    newElement: newElementSelector(state),\r\n    newDashboard: newDashboardSelector(state),\r\n    dashboards: dashboardsSelector(state),\r\n    dashboardName: dashboardNameSelector(state),\r\n    dashboardId: dashboardIdSelector(state),\r\n    instDataObject: instDataObjectSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setMouseCoordinate: setCoord,\r\n    setNewElement: setElement,\r\n    setToNewDashboard: setElemToNewDashboard,\r\n    editElement: editElemInNewDashboard,\r\n    deleteElement: deleteElemInNewDashboard,\r\n    clearElement: clearElement,\r\n    setDashboardName: setDashboardName,\r\n    setDashboardId: setDashboardId,\r\n    setDashboard: setDashboard,\r\n    clearNewDashboard: clearNewDashboard,\r\n    setNewDashboard: setNewDashboard,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Constructor);\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport {} from \"react-router\";\r\nimport { dashboardsSelector, deleteDashboard } from \"../reducers/dashboards\";\r\nimport { installationsSelector, setInstallations } from \"../reducers/installationsVRM\";\r\nimport { updateTimerId, updateInstallations } from \"./apiVRM\";\r\nimport { isLoginSelector } from \"../reducers/loginVRM\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { setInstallationObjectData, instDataObjectSelector } from \"../reducers/installationsObjectData\";\r\nimport queryString from \"query-string\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n    componentWillUnmount(){\r\n        clearInterval(updateTimerId);\r\n        clearTimeout(updateTimerId);\r\n    }\r\n    componentWillMount(){\r\n        updateInstallations(this.props.isLogin, this.props.setInstallations, \r\n            this.props.setInstallationObjectData);\r\n    };\r\n    render() {\r\n        const { dashboards, deleteDashboard, instDataObject } = this.props;\r\n        const target = queryString.parse(this.props.location.search);\r\n        if (!target.id || !dashboards[target.id]) {\r\n            return (dashboards.map( (dashboard, id) => {\r\n                if (dashboard) {    \r\n                    return (\r\n                        <Link \r\n                        key={id}\r\n                        to={`/dashboards/?id=${dashboard.id}`} >\r\n                            <div>\r\n                                {dashboard.name}\r\n                            </div>\r\n                        </Link>     \r\n                    );\r\n                }\r\n                return null;\r\n            }));\r\n        }\r\n        return(\r\n            <div style={{position: \"static\"}}>\r\n                <div className=\"dashboard\" style={{position: \"relative\"}}>\r\n                {dashboards[target.id].dashboard.map((elem, id) => {\r\n                    if (elem === \"\") {\r\n                        return null\r\n                    }\r\n                    return (\r\n                        <div\r\n                        key={id} \r\n                        style={{position: 'absolute', left: elem.X, top: elem.Y}} >\r\n                            {`${elem.element.name} : \r\n                            ${(instDataObject[elem.element.idSite] && instDataObject[elem.element.idSite][elem.element.param])\r\n                                ? instDataObject[elem.element.idSite][elem.element.param].value\r\n                                : \"---\"\r\n                            }`}\r\n                        </div>\r\n                    )})}  \r\n                </div>\r\n                <div style={{position: 'fixed', left: \"5px\", bottom: \"5px\"}}>\r\n                    <Button onClick={\r\n                        () => {\r\n                            this.props.history.push(`/newdashboard/?id=${target.id}`);\r\n                        }\r\n                    }>Change dashboard</Button>\r\n                    <Button onClick={() => {\r\n                        if (window.confirm(\"Do you really want to delete dashboard?\")) {\r\n                            deleteDashboard(target.id);\r\n                            this.props.history.push(\"/\");\r\n                        }\r\n                    }}>Delete dashboard</Button>\r\n                </div>\r\n            </div>  \r\n        );\r\n    };\r\n};\r\n\r\nDashboard.propTypes = {\r\n    dashboards: PropTypes.array,\r\n    installationsResponce: PropTypes.object,\r\n    isLogin: PropTypes.object,\r\n    setInstallations: PropTypes.func,\r\n    deleteDashboard: PropTypes.func,\r\n    setInstallationObjectData: PropTypes.func,\r\n    instDataObject: PropTypes.object,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dashboards: dashboardsSelector(state),\r\n    installationsResponce: installationsSelector(state),\r\n    isLogin: isLoginSelector(state),\r\n    instDataObject: instDataObjectSelector(state),\r\n});\r\n\r\nconst mapDispathToProps = {\r\n    setInstallations: setInstallations,\r\n    deleteDashboard: deleteDashboard,\r\n    setInstallationObjectData: setInstallationObjectData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(Dashboard);","import { handleActions, createAction } from \"redux-actions\";\r\n\r\nconst REDUCER_NAME = \"hideMainMenu\";\r\n\r\nconst TOGGLE_MAIN_MENU = \"HIDE_MAIN_MENU/TOGGLE_MAIN_MENU\";\r\n\r\nexport const toggleMainMenu = createAction(TOGGLE_MAIN_MENU);\r\n\r\nconst initialState = true;\r\n\r\nexport default handleActions({\r\n    [toggleMainMenu]: (state, { payload }) => (state)? false : true,\r\n}, initialState);\r\n\r\nexport const hideMainMenuSelector = state => state[REDUCER_NAME];    ","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from '@material-ui/core';\nimport{ BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport Login from \"./containers/login\";\nimport Installations from './containers/installations';\nimport { orange, lightBlue, blue } from '@material-ui/core/colors';\n// import { getCookie } from './containers/cookieGetSet';\nimport { setToken } from './reducers/loginVRM';\nimport { setInstallations } from './reducers/installationsVRM';\nimport { MainMenu } from './components/mainMenu';\nimport Constructor from \"./containers/constructor\";\nimport { dashboardsSelector, loadDashboards } from './reducers/dashboards';\nimport Dashboard from './containers/dashboard';\nimport { hideMainMenuSelector, toggleMainMenu } from './reducers/hideMainMenu';\nimport { setInstallationObjectData } from './reducers/installationsObjectData';\nimport { setDashboardId } from './reducers/dashboardId';\nimport { setDashboardName } from './reducers/dashboardName';\nimport { clearNewDashboard } from './reducers/newDashboard';\n\n\n\nconst mainTheme = createMuiTheme({\n  palette: {\n    primary: lightBlue,\n    secondary: orange,\n  }\n});\n\nconst Page404 = () =>(\n  <div>\n    <h2>404 Error: Page not found</h2>\n    <Link to=\"/sites\">Go to main</Link>\n  </div>   \n  );\n\n\nclass App extends React.Component{\n\n  componentWillMount(){\n    const rawloginVRM = localStorage.getItem(\"loginVRM\");\n    const rawInst = localStorage.getItem(\"installationsVRM\");\n    const rawDashboards = localStorage.getItem(\"dashboards\");\n    const rawinstallationsObjectData = localStorage.getItem(\"installationsObjectData\");\n    // console.log(\"-- write to store from Local Storage --\");\n    if (rawloginVRM) this.props.setIsLogin(JSON.parse(rawloginVRM))   \n    if (rawInst) this.props.setInst(JSON.parse(rawInst))\n    if (rawDashboards) this.props.setDashboards(JSON.parse(rawDashboards))\n    if (rawinstallationsObjectData) this.props.setInstallationObjectData(JSON.parse(rawinstallationsObjectData))\n  };\n\n  render(){\n    const { dashboards, hideMainMenu, toggleHide } = this.props;\n    return(\n      <ThemeProvider theme={mainTheme}>\n      <div className=\"app\">\n        <h1>\n          PV monitor\n        </h1>\n        <BrowserRouter basename=\"/PVM\">\n          <MainMenu\n          dashboards={dashboards}\n          toggleHide={toggleHide}\n          hide={hideMainMenu}\n          setDashboardId={setDashboardId}\n          setDashboardName={setDashboardName}\n          clearNewDashboard={clearNewDashboard} />\n        <Login />\n            <Switch>\n            <Route exact path=\"/\" component={Installations} />\n            <Route path=\"/sites\" component={Installations} />\n            {/* {dashboards.map((dashboard, id) => {\n              if (dashboard !== \"\") {\n                return (\n                  <Route key={id} path={`/dashboards/${id}`} component={Dashboard}/>\n                )\n              }\n            })} */}\n            <Route path=\"/dashboards\" component={Dashboard} />\n            <Route path=\"/newdashboard\" component={Constructor} />\n            <Route component={Page404} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nApp.propTypes = {\n  setIsLogin: PropTypes.func,\n  setInst: PropTypes.func,\n  dashboards: PropTypes.array,\n  setDashboards: PropTypes.func,\n  hideMainMenu: PropTypes.bool,\n  toggleHide: PropTypes.func,\n  setInstallationObjectData: PropTypes.func,\n  setDashboardId: PropTypes.func,\n  setDashboardName: PropTypes.func,\n  clearNewDashboard: PropTypes.func,\n};\n\nconst mapDispatchtoProps = {\n  setIsLogin: setToken,\n  setInst: setInstallations,\n  setDashboards: loadDashboards,\n  toggleHide: toggleMainMenu,\n  setInstallationObjectData: setInstallationObjectData,\n  setDashboardId: setDashboardId,\n  setDashboardName: setDashboardName,\n  clearNewDashboard: clearNewDashboard,\n};\n\nconst mapStateToProps = state => ({\n  dashboards: dashboardsSelector(state),\n  hideMainMenu: hideMainMenuSelector(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import loginField from \"./loginField\";\r\nimport loginInput from \"./loginInput\";\r\nimport loginVRM from \"./loginVRM\";\r\nimport installationsVRM from \"./installationsVRM\";\r\nimport selectedInst from \"./selectedInst\";\r\nimport installationsObjectData from \"./installationsObjectData\";\r\nimport mouseCoordinates from \"./mouseCoordinates\";\r\nimport newDashboardElement from \"./newDashboardElement\";\r\nimport newDashboard from \"./newDashboard\";\r\nimport dashboards from \"./dashboards\";\r\nimport dashboardName from \"./dashboardName\";\r\nimport dashboardId from \"./dashboardId\";\r\nimport hideMainMenu from \"./hideMainMenu\";\r\n\r\n\r\nexport const reducers = {\r\n    loginField,\r\n    loginInput,\r\n    loginVRM,\r\n    installationsVRM,\r\n    selectedInst,\r\n    installationsObjectData,\r\n    mouseCoordinates,\r\n    newDashboardElement,\r\n    newDashboard,\r\n    dashboards,\r\n    dashboardName,\r\n    dashboardId,\r\n    hideMainMenu,\r\n}","// import { setCookie } from \"../containers/cookieGetSet\";\r\nimport { setLocalStorage } from \"../containers/localStorageReadWrite\";\r\nimport { SET_INSTALLATIONS } from \"../reducers/installationsVRM\";\r\nimport { SET_ISNTLOGIN } from \"../reducers/loginVRM\";\r\nimport { SET_DASHBOARD } from \"../reducers/dashboards\";\r\nimport { SET_DATA } from \"../reducers/installationsObjectData\";\r\n\r\nconst filterToLocalStorageLog = {\r\n    [SET_ISNTLOGIN]: \"loginVRM\", \r\n    [SET_INSTALLATIONS]: \"installationsVRM\", \r\n    [SET_DATA]: \"installationsObjectData\",\r\n    [SET_DASHBOARD]: \"dashboards\"\r\n};\r\n\r\n\r\nconst actionsToLocalStorage = [SET_INSTALLATIONS, SET_ISNTLOGIN, SET_DATA, SET_DASHBOARD];\r\n\r\nexport const  logToLocalStorage = state => next => action => {\r\n    const returnValue = next(action);\r\n    // console.log(action);\r\n    const newState = state.getState();\r\n    if (actionsToLocalStorage.indexOf(action.type) !== -1) {\r\n        // console.log(\"-- log state to Local Storage -- \");\r\n        setLocalStorage(filterToLocalStorageLog[action.type], \r\n            JSON.stringify(newState[filterToLocalStorageLog[action.type]]));\r\n            // console.log(\"Data to log: \", newState[filterToLocalStorageLog[action.type]]);\r\n    }\r\n    \r\n    return returnValue;\r\n}\r\n\r\n// const filterToCookieLog = [\"loginVRM\"];\r\n\r\n// export const  logToCookie = state => next => action => {\r\n//         const returnValue = next(action);\r\n//         const newState = state.getState();\r\n//         console.log('1: ', newState);\r\n//         // console.log('2: ', newState.loginVRM);\r\n//         filterToCookieLog.map((key) => {\r\n//             if (newState[key]) {\r\n//                 console.log(\"cookie tolog: \", newState[key]);\r\n//                 setCookie(key, JSON.stringify(newState[key]), {\"max-age\": 0});\r\n//             }\r\n//         })\r\n//         // console.log(document.cookie);\r\n//         return returnValue;\r\n// }\r\n\r\n\r\nconst createMiddlewares = () => [\r\n    // logToCookie,\r\n    logToLocalStorage\r\n]\r\n\r\nexport default createMiddlewares;","import React from \"react\";\r\n\r\nexport function setLocalStorage(key, value) {\r\n    const myStorage = localStorage;\r\n    myStorage.setItem(key, value);\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\n\nimport { configStore } from \"./store\";\nimport { reducers } from \"./reducers\"\nimport createMiddlewares from './store/middlewares';\n\n\nexport const store = configStore(reducers, createMiddlewares());\n\nconst RootComponent = () => {\n    return (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    )\n}\n\nReactDOM.render(<RootComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore , combineReducers, applyMiddleware } from \"redux\";\r\n\r\nexport const configStore = (reducers, middlewares) => {\r\n   return createStore(combineReducers(reducers), {}, applyMiddleware(...middlewares));\r\n};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}